
Opdracht 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ccd  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c5  00000000  00000000  00000fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005dc  00000000  00000000  0000188a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045e  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a7  00000000  00000000  0000237e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002725  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	9f d0       	rcall	.+318    	; 0x1d8 <main>
  9a:	9f c0       	rjmp	.+318    	; 0x1da <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
				}
			}
			PORTD = 0x40;
			wait(250);
			PORTD = 0;
			wait(250);
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <opdrachtB7>:
		
	}
}

int opdrachtB7(void){
	DDRD = 0b11111111;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	81 bb       	out	0x11, r24	; 17
	
	int state = 0;
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;

			case 3:
			PORTD = 0;
			PORTD = 0b00001000;
  c8:	68 94       	set
  ca:	ff 24       	eor	r15, r15
  cc:	f3 f8       	bld	r15, 3
			if(PIND & 64) /*6*/{
				state = 4;
				wait(200);
			}
			if(PIND & 32) /*5*/{
				state = 4;
  ce:	68 94       	set
  d0:	99 24       	eor	r9, r9
  d2:	92 f8       	bld	r9, 2
  d4:	a1 2c       	mov	r10, r1

			case 3:
			PORTD = 0;
			PORTD = 0b00001000;
			if(PIND & 128) /*7*/{
				state = 0;
  d6:	71 2c       	mov	r7, r1
  d8:	81 2c       	mov	r8, r1
			}
			break;

			case 4:
			PORTD = 0;
			PORTD = 0b10000000;
  da:	00 e8       	ldi	r16, 0x80	; 128
	while(1){
		switch (state)
		{
			case 0:
			PORTD = 0;
			PORTD = 0b00000001;
  dc:	11 e0       	ldi	r17, 0x01	; 1
			if(PIND & 64) /*6*/{
				state = 1;
				wait(200);
			}
			if(PIND & 32) /*5*/{
				state = 2;
  de:	68 94       	set
  e0:	bb 24       	eor	r11, r11
  e2:	b1 f8       	bld	r11, 1
  e4:	c1 2c       	mov	r12, r1
		{
			case 0:
			PORTD = 0;
			PORTD = 0b00000001;
			if(PIND & 64) /*6*/{
				state = 1;
  e6:	dd 24       	eor	r13, r13
  e8:	d3 94       	inc	r13
  ea:	e1 2c       	mov	r14, r1
			}
			break;

			case 1:
			PORTD = 0;
			PORTD = 0b00000010;
  ec:	d2 e0       	ldi	r29, 0x02	; 2
			}
			break;

			case 2:
			PORTD = 0;
			PORTD = 0b00000100;
  ee:	c4 e0       	ldi	r28, 0x04	; 4
			if(PIND & 64) /*6*/{
				state = 1;
				wait(200);
			}
			if(PIND & 32) /*5*/{
				state = 3;
  f0:	0f 2e       	mov	r0, r31
  f2:	f3 e0       	ldi	r31, 0x03	; 3
  f4:	5f 2e       	mov	r5, r31
  f6:	f0 2d       	mov	r31, r0
  f8:	61 2c       	mov	r6, r1
int opdrachtB7(void){
	DDRD = 0b11111111;
	
	int state = 0;
	while(1){
		switch (state)
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	91 05       	cpc	r25, r1
  fe:	91 f1       	breq	.+100    	; 0x164 <opdrachtB7+0xa4>
 100:	34 f4       	brge	.+12     	; 0x10e <opdrachtB7+0x4e>
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	69 f0       	breq	.+26     	; 0x120 <opdrachtB7+0x60>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	91 05       	cpc	r25, r1
 10a:	d9 f0       	breq	.+54     	; 0x142 <opdrachtB7+0x82>
 10c:	f6 cf       	rjmp	.-20     	; 0xfa <opdrachtB7+0x3a>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	91 05       	cpc	r25, r1
 112:	09 f4       	brne	.+2      	; 0x116 <opdrachtB7+0x56>
 114:	3f c0       	rjmp	.+126    	; 0x194 <opdrachtB7+0xd4>
 116:	84 30       	cpi	r24, 0x04	; 4
 118:	91 05       	cpc	r25, r1
 11a:	09 f4       	brne	.+2      	; 0x11e <opdrachtB7+0x5e>
 11c:	53 c0       	rjmp	.+166    	; 0x1c4 <opdrachtB7+0x104>
 11e:	ed cf       	rjmp	.-38     	; 0xfa <opdrachtB7+0x3a>
		{
			case 0:
			PORTD = 0;
 120:	12 ba       	out	0x12, r1	; 18
			PORTD = 0b00000001;
 122:	12 bb       	out	0x12, r17	; 18
			if(PIND & 64) /*6*/{
 124:	86 9b       	sbis	0x10, 6	; 16
 126:	05 c0       	rjmp	.+10     	; 0x132 <opdrachtB7+0x72>
				state = 1;
				wait(200);
 128:	88 ec       	ldi	r24, 0xC8	; 200
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	b8 df       	rcall	.-144    	; 0x9e <wait>
		{
			case 0:
			PORTD = 0;
			PORTD = 0b00000001;
			if(PIND & 64) /*6*/{
				state = 1;
 12e:	8d 2d       	mov	r24, r13
 130:	9e 2d       	mov	r25, r14
				wait(200);
			}
			if(PIND & 32) /*5*/{
 132:	85 9b       	sbis	0x10, 5	; 16
 134:	e2 cf       	rjmp	.-60     	; 0xfa <opdrachtB7+0x3a>
				state = 2;
				wait(200);
 136:	88 ec       	ldi	r24, 0xC8	; 200
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	b1 df       	rcall	.-158    	; 0x9e <wait>
			if(PIND & 64) /*6*/{
				state = 1;
				wait(200);
			}
			if(PIND & 32) /*5*/{
				state = 2;
 13c:	8b 2d       	mov	r24, r11
 13e:	9c 2d       	mov	r25, r12
 140:	dc cf       	rjmp	.-72     	; 0xfa <opdrachtB7+0x3a>
				wait(200);
			}
			break;

			case 1:
			PORTD = 0;
 142:	12 ba       	out	0x12, r1	; 18
			PORTD = 0b00000010;
 144:	d2 bb       	out	0x12, r29	; 18
			if(PIND & 128) /*7*/{
 146:	87 9b       	sbis	0x10, 7	; 16
 148:	05 c0       	rjmp	.+10     	; 0x154 <opdrachtB7+0x94>
				state = 0;
				wait(200);
 14a:	88 ec       	ldi	r24, 0xC8	; 200
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	a7 df       	rcall	.-178    	; 0x9e <wait>

			case 1:
			PORTD = 0;
			PORTD = 0b00000010;
			if(PIND & 128) /*7*/{
				state = 0;
 150:	87 2d       	mov	r24, r7
 152:	98 2d       	mov	r25, r8
				wait(200);
			}
			if(PIND & 32) /*5*/{
 154:	85 9b       	sbis	0x10, 5	; 16
				state = 2;
				wait(200);
 156:	d1 cf       	rjmp	.-94     	; 0xfa <opdrachtB7+0x3a>
 158:	88 ec       	ldi	r24, 0xC8	; 200
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	a0 df       	rcall	.-192    	; 0x9e <wait>
			if(PIND & 128) /*7*/{
				state = 0;
				wait(200);
			}
			if(PIND & 32) /*5*/{
				state = 2;
 15e:	8b 2d       	mov	r24, r11
 160:	9c 2d       	mov	r25, r12
 162:	cb cf       	rjmp	.-106    	; 0xfa <opdrachtB7+0x3a>
				wait(200);
			}
			break;

			case 2:
			PORTD = 0;
 164:	12 ba       	out	0x12, r1	; 18
			PORTD = 0b00000100;
 166:	c2 bb       	out	0x12, r28	; 18
			if(PIND & 64) /*6*/{
 168:	86 9b       	sbis	0x10, 6	; 16
				state = 1;
				wait(200);
 16a:	05 c0       	rjmp	.+10     	; 0x176 <opdrachtB7+0xb6>
 16c:	88 ec       	ldi	r24, 0xC8	; 200
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	96 df       	rcall	.-212    	; 0x9e <wait>

			case 2:
			PORTD = 0;
			PORTD = 0b00000100;
			if(PIND & 64) /*6*/{
				state = 1;
 172:	8d 2d       	mov	r24, r13
				wait(200);
			}
			if(PIND & 32) /*5*/{
 174:	9e 2d       	mov	r25, r14
 176:	85 9b       	sbis	0x10, 5	; 16
				state = 3;
				wait(200);
 178:	05 c0       	rjmp	.+10     	; 0x184 <opdrachtB7+0xc4>
 17a:	88 ec       	ldi	r24, 0xC8	; 200
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	8f df       	rcall	.-226    	; 0x9e <wait>
			if(PIND & 64) /*6*/{
				state = 1;
				wait(200);
			}
			if(PIND & 32) /*5*/{
				state = 3;
 180:	85 2d       	mov	r24, r5
				wait(200);
			}
			if(PIND & 128) /*7*/{
 182:	96 2d       	mov	r25, r6
 184:	87 9b       	sbis	0x10, 7	; 16
				state = 0;
				wait(200);
 186:	b9 cf       	rjmp	.-142    	; 0xfa <opdrachtB7+0x3a>
 188:	88 ec       	ldi	r24, 0xC8	; 200
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	88 df       	rcall	.-240    	; 0x9e <wait>
			if(PIND & 32) /*5*/{
				state = 3;
				wait(200);
			}
			if(PIND & 128) /*7*/{
				state = 0;
 18e:	87 2d       	mov	r24, r7
 190:	98 2d       	mov	r25, r8
				wait(200);
			}
			break;

			case 3:
			PORTD = 0;
 192:	b3 cf       	rjmp	.-154    	; 0xfa <opdrachtB7+0x3a>
			PORTD = 0b00001000;
 194:	12 ba       	out	0x12, r1	; 18
			if(PIND & 128) /*7*/{
 196:	f2 ba       	out	0x12, r15	; 18
 198:	87 9b       	sbis	0x10, 7	; 16
				state = 0;
				wait(200);
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <opdrachtB7+0xe6>
 19c:	88 ec       	ldi	r24, 0xC8	; 200
 19e:	90 e0       	ldi	r25, 0x00	; 0

			case 3:
			PORTD = 0;
			PORTD = 0b00001000;
			if(PIND & 128) /*7*/{
				state = 0;
 1a0:	7e df       	rcall	.-260    	; 0x9e <wait>
 1a2:	87 2d       	mov	r24, r7
				wait(200);
			}
			if(PIND & 64) /*6*/{
 1a4:	98 2d       	mov	r25, r8
 1a6:	86 9b       	sbis	0x10, 6	; 16
				state = 4;
				wait(200);
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <opdrachtB7+0xf4>
 1aa:	88 ec       	ldi	r24, 0xC8	; 200
 1ac:	90 e0       	ldi	r25, 0x00	; 0
			if(PIND & 128) /*7*/{
				state = 0;
				wait(200);
			}
			if(PIND & 64) /*6*/{
				state = 4;
 1ae:	77 df       	rcall	.-274    	; 0x9e <wait>
 1b0:	89 2d       	mov	r24, r9
				wait(200);
			}
			if(PIND & 32) /*5*/{
 1b2:	9a 2d       	mov	r25, r10
 1b4:	85 9b       	sbis	0x10, 5	; 16
				state = 4;
				wait(200);
 1b6:	a1 cf       	rjmp	.-190    	; 0xfa <opdrachtB7+0x3a>
 1b8:	88 ec       	ldi	r24, 0xC8	; 200
 1ba:	90 e0       	ldi	r25, 0x00	; 0
			if(PIND & 64) /*6*/{
				state = 4;
				wait(200);
			}
			if(PIND & 32) /*5*/{
				state = 4;
 1bc:	70 df       	rcall	.-288    	; 0x9e <wait>
 1be:	89 2d       	mov	r24, r9
 1c0:	9a 2d       	mov	r25, r10
				wait(200);
			}
			break;

			case 4:
			PORTD = 0;
 1c2:	9b cf       	rjmp	.-202    	; 0xfa <opdrachtB7+0x3a>
			PORTD = 0b10000000;
 1c4:	12 ba       	out	0x12, r1	; 18
			if(PIND & 128) /*7*/{
 1c6:	02 bb       	out	0x12, r16	; 18
 1c8:	87 9b       	sbis	0x10, 7	; 16
				state = 0;
				wait(200);
 1ca:	97 cf       	rjmp	.-210    	; 0xfa <opdrachtB7+0x3a>
 1cc:	88 ec       	ldi	r24, 0xC8	; 200
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	66 df       	rcall	.-308    	; 0x9e <wait>

			case 4:
			PORTD = 0;
			PORTD = 0b10000000;
			if(PIND & 128) /*7*/{
				state = 0;
 1d2:	87 2d       	mov	r24, r7
 1d4:	98 2d       	mov	r25, r8
 1d6:	91 cf       	rjmp	.-222    	; 0xfa <opdrachtB7+0x3a>

000001d8 <main>:

}

int main(void)
{
	opdrachtB7();
 1d8:	73 df       	rcall	.-282    	; 0xc0 <opdrachtB7>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
