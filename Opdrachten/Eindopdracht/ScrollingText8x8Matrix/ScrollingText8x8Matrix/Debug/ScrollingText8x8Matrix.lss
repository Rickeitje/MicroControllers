
ScrollingText8x8Matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00000ae2  00000b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800234  00800234  00000caa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f65  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a67  00000000  00000000  00001d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c2  00000000  00000000  00002774  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00003038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077a  00000000  00000000  0000363d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003db7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5f c0       	rjmp	.+190    	; 0xc0 <__ctors_end>
   2:	00 00       	nop
   4:	7a c0       	rjmp	.+244    	; 0xfa <__bad_interrupt>
   6:	00 00       	nop
   8:	78 c0       	rjmp	.+240    	; 0xfa <__bad_interrupt>
   a:	00 00       	nop
   c:	76 c0       	rjmp	.+236    	; 0xfa <__bad_interrupt>
   e:	00 00       	nop
  10:	74 c0       	rjmp	.+232    	; 0xfa <__bad_interrupt>
  12:	00 00       	nop
  14:	72 c0       	rjmp	.+228    	; 0xfa <__bad_interrupt>
  16:	00 00       	nop
  18:	70 c0       	rjmp	.+224    	; 0xfa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6e c0       	rjmp	.+220    	; 0xfa <__bad_interrupt>
  1e:	00 00       	nop
  20:	6c c0       	rjmp	.+216    	; 0xfa <__bad_interrupt>
  22:	00 00       	nop
  24:	6a c0       	rjmp	.+212    	; 0xfa <__bad_interrupt>
  26:	00 00       	nop
  28:	68 c0       	rjmp	.+208    	; 0xfa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	66 c0       	rjmp	.+204    	; 0xfa <__bad_interrupt>
  2e:	00 00       	nop
  30:	64 c0       	rjmp	.+200    	; 0xfa <__bad_interrupt>
  32:	00 00       	nop
  34:	62 c0       	rjmp	.+196    	; 0xfa <__bad_interrupt>
  36:	00 00       	nop
  38:	60 c0       	rjmp	.+192    	; 0xfa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5e c0       	rjmp	.+188    	; 0xfa <__bad_interrupt>
  3e:	00 00       	nop
  40:	5c c0       	rjmp	.+184    	; 0xfa <__bad_interrupt>
  42:	00 00       	nop
  44:	5a c0       	rjmp	.+180    	; 0xfa <__bad_interrupt>
  46:	00 00       	nop
  48:	58 c0       	rjmp	.+176    	; 0xfa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	56 c0       	rjmp	.+172    	; 0xfa <__bad_interrupt>
  4e:	00 00       	nop
  50:	54 c0       	rjmp	.+168    	; 0xfa <__bad_interrupt>
  52:	00 00       	nop
  54:	52 c0       	rjmp	.+164    	; 0xfa <__bad_interrupt>
  56:	00 00       	nop
  58:	50 c0       	rjmp	.+160    	; 0xfa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4e c0       	rjmp	.+156    	; 0xfa <__bad_interrupt>
  5e:	00 00       	nop
  60:	4c c0       	rjmp	.+152    	; 0xfa <__bad_interrupt>
  62:	00 00       	nop
  64:	4a c0       	rjmp	.+148    	; 0xfa <__bad_interrupt>
  66:	00 00       	nop
  68:	48 c0       	rjmp	.+144    	; 0xfa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	46 c0       	rjmp	.+140    	; 0xfa <__bad_interrupt>
  6e:	00 00       	nop
  70:	44 c0       	rjmp	.+136    	; 0xfa <__bad_interrupt>
  72:	00 00       	nop
  74:	42 c0       	rjmp	.+132    	; 0xfa <__bad_interrupt>
  76:	00 00       	nop
  78:	40 c0       	rjmp	.+128    	; 0xfa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3e c0       	rjmp	.+124    	; 0xfa <__bad_interrupt>
  7e:	00 00       	nop
  80:	3c c0       	rjmp	.+120    	; 0xfa <__bad_interrupt>
  82:	00 00       	nop
  84:	3a c0       	rjmp	.+116    	; 0xfa <__bad_interrupt>
  86:	00 00       	nop
  88:	38 c0       	rjmp	.+112    	; 0xfa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1a 02       	muls	r17, r26
  8e:	29 02       	muls	r18, r25
  90:	38 02       	muls	r19, r24
  92:	48 02       	muls	r20, r24
  94:	58 02       	muls	r21, r24
  96:	68 02       	muls	r22, r24
  98:	78 02       	muls	r23, r24
  9a:	88 02       	muls	r24, r24
  9c:	98 02       	muls	r25, r24
  9e:	a8 02       	muls	r26, r24
  a0:	b8 02       	muls	r27, r24
  a2:	c8 02       	muls	r28, r24
  a4:	d8 02       	muls	r29, r24
  a6:	e8 02       	muls	r30, r24
  a8:	f8 02       	muls	r31, r24
  aa:	08 03       	fmul	r16, r16
  ac:	18 03       	fmul	r17, r16
  ae:	28 03       	fmul	r18, r16
  b0:	38 03       	fmul	r19, r16
  b2:	48 03       	fmul	r20, r16
  b4:	58 03       	fmul	r21, r16
  b6:	68 03       	fmul	r22, r16
  b8:	78 03       	fmul	r23, r16
  ba:	88 03       	fmulsu	r16, r16
  bc:	98 03       	fmulsu	r17, r16
  be:	a8 03       	fmulsu	r18, r16

000000c0 <__ctors_end>:
  c0:	11 24       	eor	r1, r1
  c2:	1f be       	out	0x3f, r1	; 63
  c4:	cf ef       	ldi	r28, 0xFF	; 255
  c6:	d0 e1       	ldi	r29, 0x10	; 16
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
  cc:	12 e0       	ldi	r17, 0x02	; 2
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b1 e0       	ldi	r27, 0x01	; 1
  d2:	e2 ee       	ldi	r30, 0xE2	; 226
  d4:	fa e0       	ldi	r31, 0x0A	; 10
  d6:	00 e0       	ldi	r16, 0x00	; 0
  d8:	0b bf       	out	0x3b, r16	; 59
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x14>
  dc:	07 90       	elpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a4 33       	cpi	r26, 0x34	; 52
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0x10>

000000e6 <__do_clear_bss>:
  e6:	22 e0       	ldi	r18, 0x02	; 2
  e8:	a4 e3       	ldi	r26, 0x34	; 52
  ea:	b2 e0       	ldi	r27, 0x02	; 2
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a8 33       	cpi	r26, 0x38	; 56
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
  f6:	47 d0       	rcall	.+142    	; 0x186 <main>
  f8:	f2 c4       	rjmp	.+2532   	; 0xade <_exit>

000000fa <__bad_interrupt>:
  fa:	82 cf       	rjmp	.-252    	; 0x0 <__vectors>

000000fc <twi_start>:

	twi_start();
	twi_tx(0xE0);    // Display I2C address + R/W bit
	twi_tx(0x81);    // Display OFF - Blink On
	twi_stop();
}
  fc:	84 ea       	ldi	r24, 0xA4	; 164
  fe:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 102:	e4 e7       	ldi	r30, 0x74	; 116
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <twi_start+0xa>
 10c:	08 95       	ret

0000010e <twi_tx>:
 10e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 118:	e4 e7       	ldi	r30, 0x74	; 116
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	ec f7       	brge	.-6      	; 0x11c <twi_tx+0xe>
 122:	08 95       	ret

00000124 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 124:	18 16       	cp	r1, r24
 126:	19 06       	cpc	r1, r25
 128:	6c f4       	brge	.+26     	; 0x144 <wait+0x20>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	e9 ef       	ldi	r30, 0xF9	; 249
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <wait+0xe>
 136:	00 c0       	rjmp	.+0      	; 0x138 <wait+0x14>
 138:	00 00       	nop
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	82 17       	cp	r24, r18
 140:	93 07       	cpc	r25, r19
 142:	a9 f7       	brne	.-22     	; 0x12e <wait+0xa>
 144:	08 95       	ret

00000146 <writeData>:


/************************************************************************/
/* Write data to the dot matrix                                                                     */
/************************************************************************/
void writeData(int adress, int data){
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	d8 2f       	mov	r29, r24
 14c:	c6 2f       	mov	r28, r22
	twi_start();
 14e:	d6 df       	rcall	.-84     	; 0xfc <twi_start>
	twi_tx(0xE0);    // Display I2C addres + R/W bit
 150:	80 ee       	ldi	r24, 0xE0	; 224
 152:	dd df       	rcall	.-70     	; 0x10e <twi_tx>
	twi_tx(adress);    // Address
 154:	8d 2f       	mov	r24, r29
 156:	db df       	rcall	.-74     	; 0x10e <twi_tx>
	twi_tx(data);    // data
 158:	8c 2f       	mov	r24, r28
 15a:	d9 df       	rcall	.-78     	; 0x10e <twi_tx>
 15c:	84 e9       	ldi	r24, 0x94	; 148
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 15e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 162:	df 91       	pop	r29
	twi_start();
	twi_tx(0xE0);    // Display I2C addres + R/W bit
	twi_tx(adress);    // Address
	twi_tx(data);    // data
	twi_stop();
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <clearMatrix>:
#include <util/delay.h>
#include <string.h>
#include "ledmatrix.h"
#include "textutil.h"

void clearMatrix(void){
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
	int i;
	for(i = 0x00; i < 0x10; i++){
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
		writeData(i, 0);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	ce 01       	movw	r24, r28
 176:	e7 df       	rcall	.-50     	; 0x146 <writeData>
#include "ledmatrix.h"
#include "textutil.h"

void clearMatrix(void){
	int i;
	for(i = 0x00; i < 0x10; i++){
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	c0 31       	cpi	r28, 0x10	; 16
 17c:	d1 05       	cpc	r29, r1
 17e:	c1 f7       	brne	.-16     	; 0x170 <clearMatrix+0x8>
		writeData(i, 0);
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <main>:

int main(void){
	DDRA = 0b11111111;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	8a bb       	out	0x1a, r24	; 26

	EICRB |= 0b11000000; //set INT7 faling edge
 18a:	8a b7       	in	r24, 0x3a	; 58
 18c:	80 6c       	ori	r24, 0xC0	; 192
 18e:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= 0b10000000; //enable INT&
 190:	89 b7       	in	r24, 0x39	; 57
 192:	80 68       	ori	r24, 0x80	; 128
 194:	89 bf       	out	0x39, r24	; 57
	//enable global interrupt system
	
	
	
	sei();
 196:	78 94       	sei
	
	//int data[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f, 0x04, 0x04, 0x04, 0x3f,0x00, 0x3f, 0x21, 0x21, 0x21, 0x3f,0x00, 0x21, 0x21, 0x3f, 0x21, 0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	
	
	clearMatrix();
 198:	e7 df       	rcall	.-50     	; 0x168 <clearMatrix>
	
	stringToTextArray();
 19a:	03 d0       	rcall	.+6      	; 0x1a2 <stringToTextArray>
 19c:	81 e0       	ldi	r24, 0x01	; 1
	
	
	
	return 1;
}
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	08 95       	ret

000001a2 <stringToTextArray>:
 1a2:	cf 93       	push	r28
#include <string.h>
#include <stdlib.h>
#include "textutil.h"
#include "ledmatrix.h"

void stringToTextArray(){
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	cd 52       	subi	r28, 0x2D	; 45
 1ac:	d1 40       	sbci	r29, 0x01	; 1
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61

	int *text = malloc(1000 * sizeof(int));
 1b8:	80 ed       	ldi	r24, 0xD0	; 208
 1ba:	97 e0       	ldi	r25, 0x07	; 7
 1bc:	67 d3       	rcall	.+1742   	; 0x88c <malloc>
 1be:	5c 01       	movw	r10, r24
	char data[] = "The quick brown fox jumped over the lazy dog";
 1c0:	2d e2       	ldi	r18, 0x2D	; 45
 1c2:	e6 e0       	ldi	r30, 0x06	; 6
 1c4:	f2 e0       	ldi	r31, 0x02	; 2
 1c6:	ce 01       	movw	r24, r28
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	dc 01       	movw	r26, r24
 1cc:	01 90       	ld	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	2a 95       	dec	r18
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <stringToTextArray+0x2a>
	int length = strlen(data);
 1d4:	fc 01       	movw	r30, r24
 1d6:	01 90       	ld	r0, Z+
 1d8:	00 20       	and	r0, r0
 1da:	e9 f7       	brne	.-6      	; 0x1d6 <stringToTextArray+0x34>
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	6f 01       	movw	r12, r30
 1e0:	c8 1a       	sub	r12, r24
 1e2:	d9 0a       	sbc	r13, r25
 1e4:	96 01       	movw	r18, r12
 1e6:	f5 01       	movw	r30, r10
 1e8:	c5 01       	movw	r24, r10
 1ea:	40 96       	adiw	r24, 0x10	; 16
	
	int offset;
	for(offset = 0; offset < 8; offset++){
		text[offset] = 0x00;
 1ec:	11 92       	st	Z+, r1
 1ee:	11 92       	st	Z+, r1
	int *text = malloc(1000 * sizeof(int));
	char data[] = "The quick brown fox jumped over the lazy dog";
	int length = strlen(data);
	
	int offset;
	for(offset = 0; offset < 8; offset++){
 1f0:	e8 17       	cp	r30, r24
 1f2:	f9 07       	cpc	r31, r25
 1f4:	d9 f7       	brne	.-10     	; 0x1ec <stringToTextArray+0x4a>
		text[offset] = 0x00;
	}
	
	int A[5] = {0x3e, 0x09, 0x09, 0x09, 0x3e};
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	e6 e0       	ldi	r30, 0x06	; 6
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	de 01       	movw	r26, r28
 1fe:	9e 96       	adiw	r26, 0x2e	; 46
 200:	01 90       	ld	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	8a 95       	dec	r24
 206:	e1 f7       	brne	.-8      	; 0x200 <stringToTextArray+0x5e>
	int B[5] = {0x3f, 0x25, 0x25, 0x25, 0x1a};
 208:	8a e0       	ldi	r24, 0x0A	; 10
 20a:	e0 e1       	ldi	r30, 0x10	; 16
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	de 01       	movw	r26, r28
 210:	d8 96       	adiw	r26, 0x38	; 56
 212:	01 90       	ld	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	8a 95       	dec	r24
 218:	e1 f7       	brne	.-8      	; 0x212 <stringToTextArray+0x70>
	int C[5] = {0x1e, 0x21, 0x21, 0x21, 0x21};
 21a:	8a e0       	ldi	r24, 0x0A	; 10
 21c:	ea e1       	ldi	r30, 0x1A	; 26
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	de 01       	movw	r26, r28
 222:	ae 5b       	subi	r26, 0xBE	; 190
 224:	bf 4f       	sbci	r27, 0xFF	; 255
 226:	01 90       	ld	r0, Z+
 228:	0d 92       	st	X+, r0
 22a:	8a 95       	dec	r24
 22c:	e1 f7       	brne	.-8      	; 0x226 <stringToTextArray+0x84>
	int D[5] = {0x3f, 0x21, 0x21, 0x21, 0x1e};
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	e4 e2       	ldi	r30, 0x24	; 36
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	de 01       	movw	r26, r28
 236:	a4 5b       	subi	r26, 0xB4	; 180
 238:	bf 4f       	sbci	r27, 0xFF	; 255
 23a:	01 90       	ld	r0, Z+
 23c:	0d 92       	st	X+, r0
 23e:	8a 95       	dec	r24
 240:	e1 f7       	brne	.-8      	; 0x23a <stringToTextArray+0x98>
	int E[5] = {0x3f, 0x25, 0x25, 0x21, 0x21};
 242:	8a e0       	ldi	r24, 0x0A	; 10
 244:	ee e2       	ldi	r30, 0x2E	; 46
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	de 01       	movw	r26, r28
 24a:	aa 5a       	subi	r26, 0xAA	; 170
 24c:	bf 4f       	sbci	r27, 0xFF	; 255
 24e:	01 90       	ld	r0, Z+
 250:	0d 92       	st	X+, r0
 252:	8a 95       	dec	r24
 254:	e1 f7       	brne	.-8      	; 0x24e <stringToTextArray+0xac>
	int F[5] = {0x3f, 0x05, 0x05, 0x05, 0x01};
 256:	8a e0       	ldi	r24, 0x0A	; 10
 258:	e8 e3       	ldi	r30, 0x38	; 56
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	de 01       	movw	r26, r28
 25e:	a0 5a       	subi	r26, 0xA0	; 160
 260:	bf 4f       	sbci	r27, 0xFF	; 255
 262:	01 90       	ld	r0, Z+
 264:	0d 92       	st	X+, r0
 266:	8a 95       	dec	r24
 268:	e1 f7       	brne	.-8      	; 0x262 <stringToTextArray+0xc0>
	int G[5] = {0x3f, 0x21, 0x25, 0x25, 0x3d};
 26a:	8a e0       	ldi	r24, 0x0A	; 10
 26c:	e2 e4       	ldi	r30, 0x42	; 66
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	de 01       	movw	r26, r28
 272:	a6 59       	subi	r26, 0x96	; 150
 274:	bf 4f       	sbci	r27, 0xFF	; 255
 276:	01 90       	ld	r0, Z+
 278:	0d 92       	st	X+, r0
 27a:	8a 95       	dec	r24
 27c:	e1 f7       	brne	.-8      	; 0x276 <stringToTextArray+0xd4>
	int H[5] = {0x3f, 0x04, 0x04, 0x04, 0x3f};
 27e:	8a e0       	ldi	r24, 0x0A	; 10
 280:	ec e4       	ldi	r30, 0x4C	; 76
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	de 01       	movw	r26, r28
 286:	ac 58       	subi	r26, 0x8C	; 140
 288:	bf 4f       	sbci	r27, 0xFF	; 255
 28a:	01 90       	ld	r0, Z+
 28c:	0d 92       	st	X+, r0
 28e:	8a 95       	dec	r24
 290:	e1 f7       	brne	.-8      	; 0x28a <stringToTextArray+0xe8>
	int I[5] = {0x21, 0x21, 0x3f, 0x21, 0x21};
 292:	8a e0       	ldi	r24, 0x0A	; 10
 294:	e6 e5       	ldi	r30, 0x56	; 86
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	de 01       	movw	r26, r28
 29a:	a2 58       	subi	r26, 0x82	; 130
 29c:	bf 4f       	sbci	r27, 0xFF	; 255
 29e:	01 90       	ld	r0, Z+
 2a0:	0d 92       	st	X+, r0
 2a2:	8a 95       	dec	r24
 2a4:	e1 f7       	brne	.-8      	; 0x29e <stringToTextArray+0xfc>
	int J[4] = {0x31, 0x21, 0x21, 0x3f};
 2a6:	88 e0       	ldi	r24, 0x08	; 8
 2a8:	e0 e6       	ldi	r30, 0x60	; 96
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	de 01       	movw	r26, r28
 2ae:	a8 57       	subi	r26, 0x78	; 120
 2b0:	bf 4f       	sbci	r27, 0xFF	; 255
 2b2:	01 90       	ld	r0, Z+
 2b4:	0d 92       	st	X+, r0
 2b6:	8a 95       	dec	r24
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <stringToTextArray+0x110>
	int K[4] = {0x3f, 0x04, 0x0a, 0x31};
 2ba:	88 e0       	ldi	r24, 0x08	; 8
 2bc:	e8 e6       	ldi	r30, 0x68	; 104
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	de 01       	movw	r26, r28
 2c2:	a0 57       	subi	r26, 0x70	; 112
 2c4:	bf 4f       	sbci	r27, 0xFF	; 255
 2c6:	01 90       	ld	r0, Z+
 2c8:	0d 92       	st	X+, r0
 2ca:	8a 95       	dec	r24
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <stringToTextArray+0x124>
	int L[4] = {0x3f, 0x20, 0x20, 0x20};
 2ce:	88 e0       	ldi	r24, 0x08	; 8
 2d0:	e0 e7       	ldi	r30, 0x70	; 112
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
 2d4:	de 01       	movw	r26, r28
 2d6:	a8 56       	subi	r26, 0x68	; 104
 2d8:	bf 4f       	sbci	r27, 0xFF	; 255
 2da:	01 90       	ld	r0, Z+
 2dc:	0d 92       	st	X+, r0
 2de:	8a 95       	dec	r24
 2e0:	e1 f7       	brne	.-8      	; 0x2da <stringToTextArray+0x138>
	int M[5] = {0x3f, 0x01, 0x07, 0x01, 0x3f};
 2e2:	8a e0       	ldi	r24, 0x0A	; 10
 2e4:	e8 e7       	ldi	r30, 0x78	; 120
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	de 01       	movw	r26, r28
 2ea:	a0 56       	subi	r26, 0x60	; 96
 2ec:	bf 4f       	sbci	r27, 0xFF	; 255
 2ee:	01 90       	ld	r0, Z+
 2f0:	0d 92       	st	X+, r0
 2f2:	8a 95       	dec	r24
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <stringToTextArray+0x14c>
	int N[5] = {0x3f, 0x02, 0x04, 0x08, 0x3f};
 2f6:	8a e0       	ldi	r24, 0x0A	; 10
 2f8:	e2 e8       	ldi	r30, 0x82	; 130
 2fa:	f1 e0       	ldi	r31, 0x01	; 1
 2fc:	de 01       	movw	r26, r28
 2fe:	a6 55       	subi	r26, 0x56	; 86
 300:	bf 4f       	sbci	r27, 0xFF	; 255
 302:	01 90       	ld	r0, Z+
 304:	0d 92       	st	X+, r0
 306:	8a 95       	dec	r24
 308:	e1 f7       	brne	.-8      	; 0x302 <stringToTextArray+0x160>
	int O[5] = {0x3f, 0x21, 0x21, 0x21, 0x3f};
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	ec e8       	ldi	r30, 0x8C	; 140
 30e:	f1 e0       	ldi	r31, 0x01	; 1
 310:	de 01       	movw	r26, r28
 312:	ac 54       	subi	r26, 0x4C	; 76
 314:	bf 4f       	sbci	r27, 0xFF	; 255
 316:	01 90       	ld	r0, Z+
 318:	0d 92       	st	X+, r0
 31a:	8a 95       	dec	r24
 31c:	e1 f7       	brne	.-8      	; 0x316 <stringToTextArray+0x174>
	int P[5] = {0x3f, 0x09, 0x09, 0x09, 0x06};
 31e:	8a e0       	ldi	r24, 0x0A	; 10
 320:	e6 e9       	ldi	r30, 0x96	; 150
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	de 01       	movw	r26, r28
 326:	a2 54       	subi	r26, 0x42	; 66
 328:	bf 4f       	sbci	r27, 0xFF	; 255
 32a:	01 90       	ld	r0, Z+
 32c:	0d 92       	st	X+, r0
 32e:	8a 95       	dec	r24
 330:	e1 f7       	brne	.-8      	; 0x32a <stringToTextArray+0x188>
	int Q[5] = {0x06, 0x09, 0x09, 0x09, 0x3f};
 332:	8a e0       	ldi	r24, 0x0A	; 10
 334:	e0 ea       	ldi	r30, 0xA0	; 160
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	de 01       	movw	r26, r28
 33a:	a8 53       	subi	r26, 0x38	; 56
 33c:	bf 4f       	sbci	r27, 0xFF	; 255
 33e:	01 90       	ld	r0, Z+
 340:	0d 92       	st	X+, r0
 342:	8a 95       	dec	r24
 344:	e1 f7       	brne	.-8      	; 0x33e <stringToTextArray+0x19c>
	int R[5] = {0x3f, 0x09, 0x19, 0x29, 0x06};
 346:	8a e0       	ldi	r24, 0x0A	; 10
 348:	ea ea       	ldi	r30, 0xAA	; 170
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	de 01       	movw	r26, r28
 34e:	ae 52       	subi	r26, 0x2E	; 46
 350:	bf 4f       	sbci	r27, 0xFF	; 255
 352:	01 90       	ld	r0, Z+
 354:	0d 92       	st	X+, r0
 356:	8a 95       	dec	r24
 358:	e1 f7       	brne	.-8      	; 0x352 <stringToTextArray+0x1b0>
	int S[5] = {0x16, 0x25, 0x25, 0x29, 0x1a};
 35a:	8a e0       	ldi	r24, 0x0A	; 10
 35c:	e4 eb       	ldi	r30, 0xB4	; 180
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	de 01       	movw	r26, r28
 362:	a4 52       	subi	r26, 0x24	; 36
 364:	bf 4f       	sbci	r27, 0xFF	; 255
 366:	01 90       	ld	r0, Z+
 368:	0d 92       	st	X+, r0
 36a:	8a 95       	dec	r24
 36c:	e1 f7       	brne	.-8      	; 0x366 <stringToTextArray+0x1c4>
	int T[5] = {0x01, 0x01, 0x3f, 0x01, 0x01};
 36e:	8a e0       	ldi	r24, 0x0A	; 10
 370:	ee eb       	ldi	r30, 0xBE	; 190
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	de 01       	movw	r26, r28
 376:	aa 51       	subi	r26, 0x1A	; 26
 378:	bf 4f       	sbci	r27, 0xFF	; 255
 37a:	01 90       	ld	r0, Z+
 37c:	0d 92       	st	X+, r0
 37e:	8a 95       	dec	r24
 380:	e1 f7       	brne	.-8      	; 0x37a <stringToTextArray+0x1d8>
	int U[5] = {0x0f, 0x10, 0x10, 0x08, 0x1f};
 382:	8a e0       	ldi	r24, 0x0A	; 10
 384:	e8 ec       	ldi	r30, 0xC8	; 200
 386:	f1 e0       	ldi	r31, 0x01	; 1
 388:	de 01       	movw	r26, r28
 38a:	a0 51       	subi	r26, 0x10	; 16
 38c:	bf 4f       	sbci	r27, 0xFF	; 255
 38e:	01 90       	ld	r0, Z+
 390:	0d 92       	st	X+, r0
 392:	8a 95       	dec	r24
 394:	e1 f7       	brne	.-8      	; 0x38e <stringToTextArray+0x1ec>
	int V[5] = {0x07, 0x08, 0x10, 0x08, 0x07};
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	e2 ed       	ldi	r30, 0xD2	; 210
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	de 01       	movw	r26, r28
 39e:	a6 50       	subi	r26, 0x06	; 6
 3a0:	bf 4f       	sbci	r27, 0xFF	; 255
 3a2:	01 90       	ld	r0, Z+
 3a4:	0d 92       	st	X+, r0
 3a6:	8a 95       	dec	r24
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <stringToTextArray+0x200>
	int W[5] = {0x1f, 0x20, 0x1c, 0x20, 0x1f};
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	ec ed       	ldi	r30, 0xDC	; 220
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	de 01       	movw	r26, r28
 3b2:	ac 5f       	subi	r26, 0xFC	; 252
 3b4:	be 4f       	sbci	r27, 0xFE	; 254
 3b6:	01 90       	ld	r0, Z+
 3b8:	0d 92       	st	X+, r0
 3ba:	8a 95       	dec	r24
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <stringToTextArray+0x214>
	int X[5] = {0x11, 0x0a, 0x04, 0x0a, 0x11};
 3be:	8a e0       	ldi	r24, 0x0A	; 10
 3c0:	e6 ee       	ldi	r30, 0xE6	; 230
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	de 01       	movw	r26, r28
 3c6:	a2 5f       	subi	r26, 0xF2	; 242
 3c8:	be 4f       	sbci	r27, 0xFE	; 254
 3ca:	01 90       	ld	r0, Z+
 3cc:	0d 92       	st	X+, r0
 3ce:	8a 95       	dec	r24
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <stringToTextArray+0x228>
	int Y[5] = {0x22, 0x14, 0x08, 0x04, 0x02};
 3d2:	8a e0       	ldi	r24, 0x0A	; 10
 3d4:	e0 ef       	ldi	r30, 0xF0	; 240
 3d6:	f1 e0       	ldi	r31, 0x01	; 1
 3d8:	de 01       	movw	r26, r28
 3da:	a8 5e       	subi	r26, 0xE8	; 232
 3dc:	be 4f       	sbci	r27, 0xFE	; 254
 3de:	01 90       	ld	r0, Z+
 3e0:	0d 92       	st	X+, r0
 3e2:	8a 95       	dec	r24
 3e4:	e1 f7       	brne	.-8      	; 0x3de <stringToTextArray+0x23c>
	int Z[6] = {0x41, 0x61, 0x51, 0x49, 0x45, 0x43};
 3e6:	8c e0       	ldi	r24, 0x0C	; 12
 3e8:	ea ef       	ldi	r30, 0xFA	; 250
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	de 01       	movw	r26, r28
 3ee:	ae 5d       	subi	r26, 0xDE	; 222
 3f0:	be 4f       	sbci	r27, 0xFE	; 254
 3f2:	01 90       	ld	r0, Z+
 3f4:	0d 92       	st	X+, r0
 3f6:	8a 95       	dec	r24
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <stringToTextArray+0x250>
	
	int i;
	for(i = 0; i < length; i++){
 3fa:	12 16       	cp	r1, r18
 3fc:	13 06       	cpc	r1, r19
 3fe:	0c f0       	brlt	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	d6 c1       	rjmp	.+940    	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
 402:	ce 01       	movw	r24, r28
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	7c 01       	movw	r14, r24
 408:	c8 0e       	add	r12, r24
 40a:	d9 1e       	adc	r13, r25
	int *text = malloc(1000 * sizeof(int));
	char data[] = "The quick brown fox jumped over the lazy dog";
	int length = strlen(data);
	
	int offset;
	for(offset = 0; offset < 8; offset++){
 40c:	08 e0       	ldi	r16, 0x08	; 8
 40e:	10 e0       	ldi	r17, 0x00	; 0
			case 'z':
			memcpy(text + offset, Z, sizeof(Z));
			offset += sizeof(Z) / 2;
			break;
			default:
			memcpy(text + offset, 0x00, sizeof(int));
 410:	81 2c       	mov	r8, r1
 412:	91 2c       	mov	r9, r1
	int Y[5] = {0x22, 0x14, 0x08, 0x04, 0x02};
	int Z[6] = {0x41, 0x61, 0x51, 0x49, 0x45, 0x43};
	
	int i;
	for(i = 0; i < length; i++){
		char letter = tolower(data[i]);
 414:	d7 01       	movw	r26, r14
 416:	8d 91       	ld	r24, X+
 418:	7d 01       	movw	r14, r26
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	58 d3       	rcall	.+1712   	; 0xace <tolower>
		
		switch (letter)
 41e:	fc 01       	movw	r30, r24
 420:	ff 27       	eor	r31, r31
 422:	e1 56       	subi	r30, 0x61	; 97
 424:	f1 09       	sbc	r31, r1
 426:	ea 31       	cpi	r30, 0x1A	; 26
 428:	f1 05       	cpc	r31, r1
 42a:	08 f0       	brcs	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	a1 c1       	rjmp	.+834    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 42e:	ea 5b       	subi	r30, 0xBA	; 186
 430:	ff 4f       	sbci	r31, 0xFF	; 255
 432:	23 c2       	rjmp	.+1094   	; 0x87a <__tablejump2__>
		{
			case 'a':
			memcpy(text + offset, A, sizeof(A));
 434:	d8 01       	movw	r26, r16
 436:	aa 0f       	add	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	aa 0d       	add	r26, r10
 43c:	bb 1d       	adc	r27, r11
 43e:	8a e0       	ldi	r24, 0x0A	; 10
 440:	fe 01       	movw	r30, r28
 442:	be 96       	adiw	r30, 0x2e	; 46
 444:	01 90       	ld	r0, Z+
 446:	0d 92       	st	X+, r0
 448:	8a 95       	dec	r24
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			offset += sizeof(A) / 2;
 44c:	c8 01       	movw	r24, r16
 44e:	05 96       	adiw	r24, 0x05	; 5
			break;
 450:	9b c1       	rjmp	.+822    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'b':
			memcpy(text + offset, B, sizeof(B));
 452:	d8 01       	movw	r26, r16
 454:	aa 0f       	add	r26, r26
 456:	bb 1f       	adc	r27, r27
 458:	aa 0d       	add	r26, r10
 45a:	bb 1d       	adc	r27, r11
 45c:	8a e0       	ldi	r24, 0x0A	; 10
 45e:	fe 01       	movw	r30, r28
 460:	f8 96       	adiw	r30, 0x38	; 56
 462:	01 90       	ld	r0, Z+
 464:	0d 92       	st	X+, r0
 466:	8a 95       	dec	r24
 468:	e1 f7       	brne	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			offset += sizeof(B) / 2;
 46a:	c8 01       	movw	r24, r16
 46c:	05 96       	adiw	r24, 0x05	; 5
			break;
 46e:	8c c1       	rjmp	.+792    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'c':
			memcpy(text + offset, C, sizeof(C));
 470:	d8 01       	movw	r26, r16
 472:	aa 0f       	add	r26, r26
 474:	bb 1f       	adc	r27, r27
 476:	aa 0d       	add	r26, r10
 478:	bb 1d       	adc	r27, r11
 47a:	8a e0       	ldi	r24, 0x0A	; 10
 47c:	fe 01       	movw	r30, r28
 47e:	ee 5b       	subi	r30, 0xBE	; 190
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	01 90       	ld	r0, Z+
 484:	0d 92       	st	X+, r0
 486:	8a 95       	dec	r24
 488:	e1 f7       	brne	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			offset += sizeof(C) / 2;
 48a:	c8 01       	movw	r24, r16
 48c:	05 96       	adiw	r24, 0x05	; 5
			break;
 48e:	7c c1       	rjmp	.+760    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'd':
			memcpy(text + offset, D, sizeof(D));
 490:	d8 01       	movw	r26, r16
 492:	aa 0f       	add	r26, r26
 494:	bb 1f       	adc	r27, r27
 496:	aa 0d       	add	r26, r10
 498:	bb 1d       	adc	r27, r11
 49a:	8a e0       	ldi	r24, 0x0A	; 10
 49c:	fe 01       	movw	r30, r28
 49e:	e4 5b       	subi	r30, 0xB4	; 180
 4a0:	ff 4f       	sbci	r31, 0xFF	; 255
 4a2:	01 90       	ld	r0, Z+
 4a4:	0d 92       	st	X+, r0
 4a6:	8a 95       	dec	r24
 4a8:	e1 f7       	brne	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			offset += sizeof(D) / 2;
 4aa:	c8 01       	movw	r24, r16
 4ac:	05 96       	adiw	r24, 0x05	; 5
			break;
 4ae:	6c c1       	rjmp	.+728    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'e':
			memcpy(text + offset, E, sizeof(E));
 4b0:	d8 01       	movw	r26, r16
 4b2:	aa 0f       	add	r26, r26
 4b4:	bb 1f       	adc	r27, r27
 4b6:	aa 0d       	add	r26, r10
 4b8:	bb 1d       	adc	r27, r11
 4ba:	8a e0       	ldi	r24, 0x0A	; 10
 4bc:	fe 01       	movw	r30, r28
 4be:	ea 5a       	subi	r30, 0xAA	; 170
 4c0:	ff 4f       	sbci	r31, 0xFF	; 255
 4c2:	01 90       	ld	r0, Z+
 4c4:	0d 92       	st	X+, r0
 4c6:	8a 95       	dec	r24
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			offset += sizeof(E) / 2;
 4ca:	c8 01       	movw	r24, r16
 4cc:	05 96       	adiw	r24, 0x05	; 5
			break;
 4ce:	5c c1       	rjmp	.+696    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'f':
			memcpy(text + offset, F, sizeof(F));
 4d0:	d8 01       	movw	r26, r16
 4d2:	aa 0f       	add	r26, r26
 4d4:	bb 1f       	adc	r27, r27
 4d6:	aa 0d       	add	r26, r10
 4d8:	bb 1d       	adc	r27, r11
 4da:	8a e0       	ldi	r24, 0x0A	; 10
 4dc:	fe 01       	movw	r30, r28
 4de:	e0 5a       	subi	r30, 0xA0	; 160
 4e0:	ff 4f       	sbci	r31, 0xFF	; 255
 4e2:	01 90       	ld	r0, Z+
 4e4:	0d 92       	st	X+, r0
 4e6:	8a 95       	dec	r24
 4e8:	e1 f7       	brne	.-8      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			offset += sizeof(F) / 2;
 4ea:	c8 01       	movw	r24, r16
 4ec:	05 96       	adiw	r24, 0x05	; 5
			break;
 4ee:	4c c1       	rjmp	.+664    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'g':
			memcpy(text + offset, G, sizeof(G));
 4f0:	d8 01       	movw	r26, r16
 4f2:	aa 0f       	add	r26, r26
 4f4:	bb 1f       	adc	r27, r27
 4f6:	aa 0d       	add	r26, r10
 4f8:	bb 1d       	adc	r27, r11
 4fa:	8a e0       	ldi	r24, 0x0A	; 10
 4fc:	fe 01       	movw	r30, r28
 4fe:	e6 59       	subi	r30, 0x96	; 150
 500:	ff 4f       	sbci	r31, 0xFF	; 255
 502:	01 90       	ld	r0, Z+
 504:	0d 92       	st	X+, r0
 506:	8a 95       	dec	r24
 508:	e1 f7       	brne	.-8      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
			offset += sizeof(G) / 2;
 50a:	c8 01       	movw	r24, r16
 50c:	05 96       	adiw	r24, 0x05	; 5
			break;
 50e:	3c c1       	rjmp	.+632    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'h':
			memcpy(text + offset, H, sizeof(H));
 510:	d8 01       	movw	r26, r16
 512:	aa 0f       	add	r26, r26
 514:	bb 1f       	adc	r27, r27
 516:	aa 0d       	add	r26, r10
 518:	bb 1d       	adc	r27, r11
 51a:	8a e0       	ldi	r24, 0x0A	; 10
 51c:	fe 01       	movw	r30, r28
 51e:	ec 58       	subi	r30, 0x8C	; 140
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	01 90       	ld	r0, Z+
 524:	0d 92       	st	X+, r0
 526:	8a 95       	dec	r24
 528:	e1 f7       	brne	.-8      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			offset += sizeof(H) / 2;
 52a:	c8 01       	movw	r24, r16
 52c:	05 96       	adiw	r24, 0x05	; 5
			break;
 52e:	2c c1       	rjmp	.+600    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'i':
			memcpy(text + offset, I, sizeof(I));
 530:	d8 01       	movw	r26, r16
 532:	aa 0f       	add	r26, r26
 534:	bb 1f       	adc	r27, r27
 536:	aa 0d       	add	r26, r10
 538:	bb 1d       	adc	r27, r11
 53a:	8a e0       	ldi	r24, 0x0A	; 10
 53c:	fe 01       	movw	r30, r28
 53e:	e2 58       	subi	r30, 0x82	; 130
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	01 90       	ld	r0, Z+
 544:	0d 92       	st	X+, r0
 546:	8a 95       	dec	r24
 548:	e1 f7       	brne	.-8      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
			offset += sizeof(I) / 2;
 54a:	c8 01       	movw	r24, r16
 54c:	05 96       	adiw	r24, 0x05	; 5
			break;
 54e:	1c c1       	rjmp	.+568    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'j':
			memcpy(text + offset, J, sizeof(J));
 550:	d8 01       	movw	r26, r16
 552:	aa 0f       	add	r26, r26
 554:	bb 1f       	adc	r27, r27
 556:	aa 0d       	add	r26, r10
 558:	bb 1d       	adc	r27, r11
 55a:	88 e0       	ldi	r24, 0x08	; 8
 55c:	fe 01       	movw	r30, r28
 55e:	e8 57       	subi	r30, 0x78	; 120
 560:	ff 4f       	sbci	r31, 0xFF	; 255
 562:	01 90       	ld	r0, Z+
 564:	0d 92       	st	X+, r0
 566:	8a 95       	dec	r24
 568:	e1 f7       	brne	.-8      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
			offset += sizeof(J) / 2;
 56a:	c8 01       	movw	r24, r16
 56c:	04 96       	adiw	r24, 0x04	; 4
			break;
 56e:	0c c1       	rjmp	.+536    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'k':
			memcpy(text + offset, K, sizeof(K));
 570:	d8 01       	movw	r26, r16
 572:	aa 0f       	add	r26, r26
 574:	bb 1f       	adc	r27, r27
 576:	aa 0d       	add	r26, r10
 578:	bb 1d       	adc	r27, r11
 57a:	88 e0       	ldi	r24, 0x08	; 8
 57c:	fe 01       	movw	r30, r28
 57e:	e0 57       	subi	r30, 0x70	; 112
 580:	ff 4f       	sbci	r31, 0xFF	; 255
 582:	01 90       	ld	r0, Z+
 584:	0d 92       	st	X+, r0
 586:	8a 95       	dec	r24
 588:	e1 f7       	brne	.-8      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
			offset += sizeof(K) / 2;
 58a:	c8 01       	movw	r24, r16
 58c:	04 96       	adiw	r24, 0x04	; 4
			break;
 58e:	fc c0       	rjmp	.+504    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'l':
			memcpy(text + offset, L, sizeof(L));
 590:	d8 01       	movw	r26, r16
 592:	aa 0f       	add	r26, r26
 594:	bb 1f       	adc	r27, r27
 596:	aa 0d       	add	r26, r10
 598:	bb 1d       	adc	r27, r11
 59a:	88 e0       	ldi	r24, 0x08	; 8
 59c:	fe 01       	movw	r30, r28
 59e:	e8 56       	subi	r30, 0x68	; 104
 5a0:	ff 4f       	sbci	r31, 0xFF	; 255
 5a2:	01 90       	ld	r0, Z+
 5a4:	0d 92       	st	X+, r0
 5a6:	8a 95       	dec	r24
 5a8:	e1 f7       	brne	.-8      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
			offset += sizeof(L) / 2;
 5aa:	c8 01       	movw	r24, r16
 5ac:	04 96       	adiw	r24, 0x04	; 4
			break;
 5ae:	ec c0       	rjmp	.+472    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'm':
			memcpy(text + offset, M, sizeof(M));
 5b0:	d8 01       	movw	r26, r16
 5b2:	aa 0f       	add	r26, r26
 5b4:	bb 1f       	adc	r27, r27
 5b6:	aa 0d       	add	r26, r10
 5b8:	bb 1d       	adc	r27, r11
 5ba:	8a e0       	ldi	r24, 0x0A	; 10
 5bc:	fe 01       	movw	r30, r28
 5be:	e0 56       	subi	r30, 0x60	; 96
 5c0:	ff 4f       	sbci	r31, 0xFF	; 255
 5c2:	01 90       	ld	r0, Z+
 5c4:	0d 92       	st	X+, r0
 5c6:	8a 95       	dec	r24
 5c8:	e1 f7       	brne	.-8      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
			offset += sizeof(M) / 2;
 5ca:	c8 01       	movw	r24, r16
 5cc:	05 96       	adiw	r24, 0x05	; 5
			break;
 5ce:	dc c0       	rjmp	.+440    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'n':
			memcpy(text + offset, N, sizeof(N));
 5d0:	d8 01       	movw	r26, r16
 5d2:	aa 0f       	add	r26, r26
 5d4:	bb 1f       	adc	r27, r27
 5d6:	aa 0d       	add	r26, r10
 5d8:	bb 1d       	adc	r27, r11
 5da:	8a e0       	ldi	r24, 0x0A	; 10
 5dc:	fe 01       	movw	r30, r28
 5de:	e6 55       	subi	r30, 0x56	; 86
 5e0:	ff 4f       	sbci	r31, 0xFF	; 255
 5e2:	01 90       	ld	r0, Z+
 5e4:	0d 92       	st	X+, r0
 5e6:	8a 95       	dec	r24
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
			offset += sizeof(N) / 2;
 5ea:	c8 01       	movw	r24, r16
 5ec:	05 96       	adiw	r24, 0x05	; 5
			break;
 5ee:	cc c0       	rjmp	.+408    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'o':
			memcpy(text + offset, O, sizeof(O));
 5f0:	d8 01       	movw	r26, r16
 5f2:	aa 0f       	add	r26, r26
 5f4:	bb 1f       	adc	r27, r27
 5f6:	aa 0d       	add	r26, r10
 5f8:	bb 1d       	adc	r27, r11
 5fa:	8a e0       	ldi	r24, 0x0A	; 10
 5fc:	fe 01       	movw	r30, r28
 5fe:	ec 54       	subi	r30, 0x4C	; 76
 600:	ff 4f       	sbci	r31, 0xFF	; 255
 602:	01 90       	ld	r0, Z+
 604:	0d 92       	st	X+, r0
 606:	8a 95       	dec	r24
 608:	e1 f7       	brne	.-8      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
			offset += sizeof(O) / 2;
 60a:	c8 01       	movw	r24, r16
 60c:	05 96       	adiw	r24, 0x05	; 5
			break;
 60e:	bc c0       	rjmp	.+376    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'p':
			memcpy(text + offset, P, sizeof(P));
 610:	d8 01       	movw	r26, r16
 612:	aa 0f       	add	r26, r26
 614:	bb 1f       	adc	r27, r27
 616:	aa 0d       	add	r26, r10
 618:	bb 1d       	adc	r27, r11
 61a:	8a e0       	ldi	r24, 0x0A	; 10
 61c:	fe 01       	movw	r30, r28
 61e:	e2 54       	subi	r30, 0x42	; 66
 620:	ff 4f       	sbci	r31, 0xFF	; 255
 622:	01 90       	ld	r0, Z+
 624:	0d 92       	st	X+, r0
 626:	8a 95       	dec	r24
 628:	e1 f7       	brne	.-8      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
			offset += sizeof(P) / 2;
 62a:	c8 01       	movw	r24, r16
 62c:	05 96       	adiw	r24, 0x05	; 5
			break;
 62e:	ac c0       	rjmp	.+344    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'q':
			memcpy(text + offset, Q, sizeof(Q));
 630:	d8 01       	movw	r26, r16
 632:	aa 0f       	add	r26, r26
 634:	bb 1f       	adc	r27, r27
 636:	aa 0d       	add	r26, r10
 638:	bb 1d       	adc	r27, r11
 63a:	8a e0       	ldi	r24, 0x0A	; 10
 63c:	fe 01       	movw	r30, r28
 63e:	e8 53       	subi	r30, 0x38	; 56
 640:	ff 4f       	sbci	r31, 0xFF	; 255
 642:	01 90       	ld	r0, Z+
 644:	0d 92       	st	X+, r0
 646:	8a 95       	dec	r24
 648:	e1 f7       	brne	.-8      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
			offset += sizeof(Q) / 2;
 64a:	c8 01       	movw	r24, r16
 64c:	05 96       	adiw	r24, 0x05	; 5
			break;
 64e:	9c c0       	rjmp	.+312    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'r':
			memcpy(text + offset, R, sizeof(R));
 650:	d8 01       	movw	r26, r16
 652:	aa 0f       	add	r26, r26
 654:	bb 1f       	adc	r27, r27
 656:	aa 0d       	add	r26, r10
 658:	bb 1d       	adc	r27, r11
 65a:	8a e0       	ldi	r24, 0x0A	; 10
 65c:	fe 01       	movw	r30, r28
 65e:	ee 52       	subi	r30, 0x2E	; 46
 660:	ff 4f       	sbci	r31, 0xFF	; 255
 662:	01 90       	ld	r0, Z+
 664:	0d 92       	st	X+, r0
 666:	8a 95       	dec	r24
 668:	e1 f7       	brne	.-8      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
			offset += sizeof(R) / 2;
 66a:	c8 01       	movw	r24, r16
 66c:	05 96       	adiw	r24, 0x05	; 5
			break;
 66e:	8c c0       	rjmp	.+280    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 's':
			memcpy(text + offset, S, sizeof(S));
 670:	d8 01       	movw	r26, r16
 672:	aa 0f       	add	r26, r26
 674:	bb 1f       	adc	r27, r27
 676:	aa 0d       	add	r26, r10
 678:	bb 1d       	adc	r27, r11
 67a:	8a e0       	ldi	r24, 0x0A	; 10
 67c:	fe 01       	movw	r30, r28
 67e:	e4 52       	subi	r30, 0x24	; 36
 680:	ff 4f       	sbci	r31, 0xFF	; 255
 682:	01 90       	ld	r0, Z+
 684:	0d 92       	st	X+, r0
 686:	8a 95       	dec	r24
 688:	e1 f7       	brne	.-8      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
			offset += sizeof(S) / 2;
 68a:	c8 01       	movw	r24, r16
 68c:	05 96       	adiw	r24, 0x05	; 5
			break;
 68e:	7c c0       	rjmp	.+248    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 't':
			memcpy(text + offset, T, sizeof(T));
 690:	d8 01       	movw	r26, r16
 692:	aa 0f       	add	r26, r26
 694:	bb 1f       	adc	r27, r27
 696:	aa 0d       	add	r26, r10
 698:	bb 1d       	adc	r27, r11
 69a:	8a e0       	ldi	r24, 0x0A	; 10
 69c:	fe 01       	movw	r30, r28
 69e:	ea 51       	subi	r30, 0x1A	; 26
 6a0:	ff 4f       	sbci	r31, 0xFF	; 255
 6a2:	01 90       	ld	r0, Z+
 6a4:	0d 92       	st	X+, r0
 6a6:	8a 95       	dec	r24
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
			offset += sizeof(T) / 2;
 6aa:	c8 01       	movw	r24, r16
 6ac:	05 96       	adiw	r24, 0x05	; 5
			break;
 6ae:	6c c0       	rjmp	.+216    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'u':
			memcpy(text + offset, U, sizeof(U));
 6b0:	d8 01       	movw	r26, r16
 6b2:	aa 0f       	add	r26, r26
 6b4:	bb 1f       	adc	r27, r27
 6b6:	aa 0d       	add	r26, r10
 6b8:	bb 1d       	adc	r27, r11
 6ba:	8a e0       	ldi	r24, 0x0A	; 10
 6bc:	fe 01       	movw	r30, r28
 6be:	e0 51       	subi	r30, 0x10	; 16
 6c0:	ff 4f       	sbci	r31, 0xFF	; 255
 6c2:	01 90       	ld	r0, Z+
 6c4:	0d 92       	st	X+, r0
 6c6:	8a 95       	dec	r24
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
			offset += sizeof(U) / 2;
 6ca:	c8 01       	movw	r24, r16
 6cc:	05 96       	adiw	r24, 0x05	; 5
			break;
 6ce:	5c c0       	rjmp	.+184    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'v':
			memcpy(text + offset, V, sizeof(V));
 6d0:	d8 01       	movw	r26, r16
 6d2:	aa 0f       	add	r26, r26
 6d4:	bb 1f       	adc	r27, r27
 6d6:	aa 0d       	add	r26, r10
 6d8:	bb 1d       	adc	r27, r11
 6da:	8a e0       	ldi	r24, 0x0A	; 10
 6dc:	fe 01       	movw	r30, r28
 6de:	e6 50       	subi	r30, 0x06	; 6
 6e0:	ff 4f       	sbci	r31, 0xFF	; 255
 6e2:	01 90       	ld	r0, Z+
 6e4:	0d 92       	st	X+, r0
 6e6:	8a 95       	dec	r24
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
			offset += sizeof(V) / 2;
 6ea:	c8 01       	movw	r24, r16
 6ec:	05 96       	adiw	r24, 0x05	; 5
			break;
 6ee:	4c c0       	rjmp	.+152    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'w':
			memcpy(text + offset, W, sizeof(W));
 6f0:	d8 01       	movw	r26, r16
 6f2:	aa 0f       	add	r26, r26
 6f4:	bb 1f       	adc	r27, r27
 6f6:	aa 0d       	add	r26, r10
 6f8:	bb 1d       	adc	r27, r11
 6fa:	8a e0       	ldi	r24, 0x0A	; 10
 6fc:	fe 01       	movw	r30, r28
 6fe:	ec 5f       	subi	r30, 0xFC	; 252
 700:	fe 4f       	sbci	r31, 0xFE	; 254
 702:	01 90       	ld	r0, Z+
 704:	0d 92       	st	X+, r0
 706:	8a 95       	dec	r24
 708:	e1 f7       	brne	.-8      	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
			offset += sizeof(W) / 2;
 70a:	c8 01       	movw	r24, r16
 70c:	05 96       	adiw	r24, 0x05	; 5
			break;
 70e:	3c c0       	rjmp	.+120    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'x':
			memcpy(text + offset, X, sizeof(X));
 710:	d8 01       	movw	r26, r16
 712:	aa 0f       	add	r26, r26
 714:	bb 1f       	adc	r27, r27
 716:	aa 0d       	add	r26, r10
 718:	bb 1d       	adc	r27, r11
 71a:	8a e0       	ldi	r24, 0x0A	; 10
 71c:	fe 01       	movw	r30, r28
 71e:	e2 5f       	subi	r30, 0xF2	; 242
 720:	fe 4f       	sbci	r31, 0xFE	; 254
 722:	01 90       	ld	r0, Z+
 724:	0d 92       	st	X+, r0
 726:	8a 95       	dec	r24
 728:	e1 f7       	brne	.-8      	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
			offset += sizeof(X) / 2;
 72a:	c8 01       	movw	r24, r16
 72c:	05 96       	adiw	r24, 0x05	; 5
			break;
 72e:	2c c0       	rjmp	.+88     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'y':
			memcpy(text + offset, Y, sizeof(Y));
 730:	d8 01       	movw	r26, r16
 732:	aa 0f       	add	r26, r26
 734:	bb 1f       	adc	r27, r27
 736:	aa 0d       	add	r26, r10
 738:	bb 1d       	adc	r27, r11
 73a:	8a e0       	ldi	r24, 0x0A	; 10
 73c:	fe 01       	movw	r30, r28
 73e:	e8 5e       	subi	r30, 0xE8	; 232
 740:	fe 4f       	sbci	r31, 0xFE	; 254
 742:	01 90       	ld	r0, Z+
 744:	0d 92       	st	X+, r0
 746:	8a 95       	dec	r24
 748:	e1 f7       	brne	.-8      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
			offset += sizeof(Y) / 2;
 74a:	c8 01       	movw	r24, r16
 74c:	05 96       	adiw	r24, 0x05	; 5
			break;
 74e:	1c c0       	rjmp	.+56     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			case 'z':
			memcpy(text + offset, Z, sizeof(Z));
 750:	d8 01       	movw	r26, r16
 752:	aa 0f       	add	r26, r26
 754:	bb 1f       	adc	r27, r27
 756:	aa 0d       	add	r26, r10
 758:	bb 1d       	adc	r27, r11
 75a:	8c e0       	ldi	r24, 0x0C	; 12
 75c:	fe 01       	movw	r30, r28
 75e:	ee 5d       	subi	r30, 0xDE	; 222
 760:	fe 4f       	sbci	r31, 0xFE	; 254
 762:	01 90       	ld	r0, Z+
 764:	0d 92       	st	X+, r0
 766:	8a 95       	dec	r24
 768:	e1 f7       	brne	.-8      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
			offset += sizeof(Z) / 2;
 76a:	c8 01       	movw	r24, r16
 76c:	06 96       	adiw	r24, 0x06	; 6
			break;
 76e:	0c c0       	rjmp	.+24     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			default:
			memcpy(text + offset, 0x00, sizeof(int));
 770:	f8 01       	movw	r30, r16
 772:	ee 0f       	add	r30, r30
 774:	ff 1f       	adc	r31, r31
 776:	ea 0d       	add	r30, r10
 778:	fb 1d       	adc	r31, r11
 77a:	d4 01       	movw	r26, r8
 77c:	8d 91       	ld	r24, X+
 77e:	9c 91       	ld	r25, X
 780:	91 83       	std	Z+1, r25	; 0x01
 782:	80 83       	st	Z, r24
			offset++;
 784:	c8 01       	movw	r24, r16
 786:	01 96       	adiw	r24, 0x01	; 1
			break;
			
		}
		text[offset] = 0x00;
 788:	fc 01       	movw	r30, r24
 78a:	ee 0f       	add	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	ea 0d       	add	r30, r10
 790:	fb 1d       	adc	r31, r11
 792:	11 82       	std	Z+1, r1	; 0x01
 794:	10 82       	st	Z, r1
		offset++;
 796:	8c 01       	movw	r16, r24
 798:	0f 5f       	subi	r16, 0xFF	; 255
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
	int X[5] = {0x11, 0x0a, 0x04, 0x0a, 0x11};
	int Y[5] = {0x22, 0x14, 0x08, 0x04, 0x02};
	int Z[6] = {0x41, 0x61, 0x51, 0x49, 0x45, 0x43};
	
	int i;
	for(i = 0; i < length; i++){
 79c:	ce 14       	cp	r12, r14
 79e:	df 04       	cpc	r13, r15
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
 7a2:	38 ce       	rjmp	.-912    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		text[offset] = 0x00;
		offset++;
	}
	
	int tempoffset = offset;
	for(offset; offset < tempoffset + 8; offset++){
 7a4:	09 96       	adiw	r24, 0x09	; 9
 7a6:	08 17       	cp	r16, r24
 7a8:	19 07       	cpc	r17, r25
 7aa:	ac f4       	brge	.+42     	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
 7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
 7ae:	80 e1       	ldi	r24, 0x10	; 16
 7b0:	90 e0       	ldi	r25, 0x00	; 0
	int *text = malloc(1000 * sizeof(int));
	char data[] = "The quick brown fox jumped over the lazy dog";
	int length = strlen(data);
	
	int offset;
	for(offset = 0; offset < 8; offset++){
 7b2:	08 e0       	ldi	r16, 0x08	; 8
 7b4:	10 e0       	ldi	r17, 0x00	; 0
 7b6:	00 0f       	add	r16, r16
 7b8:	11 1f       	adc	r17, r17
 7ba:	f5 01       	movw	r30, r10
 7bc:	e0 0f       	add	r30, r16
 7be:	f1 1f       	adc	r31, r17
 7c0:	00 5f       	subi	r16, 0xF0	; 240
 7c2:	1f 4f       	sbci	r17, 0xFF	; 255
 7c4:	95 01       	movw	r18, r10
 7c6:	20 0f       	add	r18, r16
 7c8:	31 1f       	adc	r19, r17
		offset++;
	}
	
	int tempoffset = offset;
	for(offset; offset < tempoffset + 8; offset++){
		text[offset] = 0x00;
 7ca:	11 92       	st	Z+, r1
 7cc:	11 92       	st	Z+, r1
		text[offset] = 0x00;
		offset++;
	}
	
	int tempoffset = offset;
	for(offset; offset < tempoffset + 8; offset++){
 7ce:	2e 17       	cp	r18, r30
 7d0:	3f 07       	cpc	r19, r31
 7d2:	d9 f7       	brne	.-10     	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
 7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			offset++;
			break;
			
		}
		text[offset] = 0x00;
		offset++;
 7d6:	c8 01       	movw	r24, r16
		wait(750);			 
		if(x<offset-8){
			x++;
		}
		else{
			x = 0;
 7d8:	e1 2c       	mov	r14, r1
 7da:	f1 2c       	mov	r15, r1
		writeData(6,	text[x+4]);
		writeData(4,	text[x+5]);
		writeData(2,	text[x+6]);
		writeData(0,	text[x+7]);
		wait(750);			 
		if(x<offset-8){
 7dc:	6c 01       	movw	r12, r24
 7de:	b8 e0       	ldi	r27, 0x08	; 8
 7e0:	cb 1a       	sub	r12, r27
 7e2:	d1 08       	sbc	r13, r1
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>
			x++;
		}
		else{
			x = 0;
 7e6:	e1 2c       	mov	r14, r1
 7e8:	f1 2c       	mov	r15, r1
		text[offset] = 0x00;
	}
	
	int x = 0;
	while(1){
		writeData(14,	text[x]);
 7ea:	87 01       	movw	r16, r14
 7ec:	00 0f       	add	r16, r16
 7ee:	11 1f       	adc	r17, r17
 7f0:	0a 0d       	add	r16, r10
 7f2:	1b 1d       	adc	r17, r11
 7f4:	f8 01       	movw	r30, r16
 7f6:	60 81       	ld	r22, Z
 7f8:	71 81       	ldd	r23, Z+1	; 0x01
 7fa:	8e e0       	ldi	r24, 0x0E	; 14
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	a3 dc       	rcall	.-1722   	; 0x146 <writeData>
		writeData(12,	text[x+1]);
 800:	d8 01       	movw	r26, r16
 802:	12 96       	adiw	r26, 0x02	; 2
 804:	6d 91       	ld	r22, X+
 806:	7c 91       	ld	r23, X
 808:	13 97       	sbiw	r26, 0x03	; 3
 80a:	8c e0       	ldi	r24, 0x0C	; 12
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	9b dc       	rcall	.-1738   	; 0x146 <writeData>
		writeData(10,	text[x+2]);
 810:	f8 01       	movw	r30, r16
 812:	64 81       	ldd	r22, Z+4	; 0x04
 814:	75 81       	ldd	r23, Z+5	; 0x05
 816:	8a e0       	ldi	r24, 0x0A	; 10
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	95 dc       	rcall	.-1750   	; 0x146 <writeData>
		writeData(8,	text[x+3]);
 81c:	d8 01       	movw	r26, r16
 81e:	16 96       	adiw	r26, 0x06	; 6
 820:	6d 91       	ld	r22, X+
 822:	7c 91       	ld	r23, X
 824:	17 97       	sbiw	r26, 0x07	; 7
 826:	88 e0       	ldi	r24, 0x08	; 8
 828:	90 e0       	ldi	r25, 0x00	; 0
		writeData(6,	text[x+4]);
 82a:	8d dc       	rcall	.-1766   	; 0x146 <writeData>
 82c:	f8 01       	movw	r30, r16
 82e:	60 85       	ldd	r22, Z+8	; 0x08
 830:	71 85       	ldd	r23, Z+9	; 0x09
 832:	86 e0       	ldi	r24, 0x06	; 6
 834:	90 e0       	ldi	r25, 0x00	; 0
		writeData(4,	text[x+5]);
 836:	87 dc       	rcall	.-1778   	; 0x146 <writeData>
 838:	d8 01       	movw	r26, r16
 83a:	1a 96       	adiw	r26, 0x0a	; 10
 83c:	6d 91       	ld	r22, X+
 83e:	7c 91       	ld	r23, X
 840:	1b 97       	sbiw	r26, 0x0b	; 11
 842:	84 e0       	ldi	r24, 0x04	; 4
 844:	90 e0       	ldi	r25, 0x00	; 0
		writeData(2,	text[x+6]);
 846:	7f dc       	rcall	.-1794   	; 0x146 <writeData>
 848:	f8 01       	movw	r30, r16
 84a:	64 85       	ldd	r22, Z+12	; 0x0c
 84c:	75 85       	ldd	r23, Z+13	; 0x0d
 84e:	82 e0       	ldi	r24, 0x02	; 2
 850:	90 e0       	ldi	r25, 0x00	; 0
		writeData(0,	text[x+7]);
 852:	79 dc       	rcall	.-1806   	; 0x146 <writeData>
 854:	d8 01       	movw	r26, r16
 856:	1e 96       	adiw	r26, 0x0e	; 14
 858:	6d 91       	ld	r22, X+
 85a:	7c 91       	ld	r23, X
 85c:	1f 97       	sbiw	r26, 0x0f	; 15
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	90 e0       	ldi	r25, 0x00	; 0
		wait(750);			 
 862:	71 dc       	rcall	.-1822   	; 0x146 <writeData>
 864:	8e ee       	ldi	r24, 0xEE	; 238
 866:	92 e0       	ldi	r25, 0x02	; 2
 868:	5d dc       	rcall	.-1862   	; 0x124 <wait>
		if(x<offset-8){
 86a:	ec 14       	cp	r14, r12
 86c:	fd 04       	cpc	r15, r13
 86e:	0c f0       	brlt	.+2      	; 0x872 <__LOCK_REGION_LENGTH__+0x472>
 870:	ba cf       	rjmp	.-140    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
			x++;
 872:	bf ef       	ldi	r27, 0xFF	; 255
 874:	eb 1a       	sub	r14, r27
 876:	fb 0a       	sbc	r15, r27
 878:	b8 cf       	rjmp	.-144    	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>

0000087a <__tablejump2__>:
 87a:	ee 0f       	add	r30, r30
 87c:	ff 1f       	adc	r31, r31
 87e:	00 24       	eor	r0, r0
 880:	00 1c       	adc	r0, r0
 882:	0b be       	out	0x3b, r0	; 59
 884:	07 90       	elpm	r0, Z+
 886:	f6 91       	elpm	r31, Z
 888:	e0 2d       	mov	r30, r0
 88a:	09 94       	ijmp

0000088c <malloc>:
 88c:	0f 93       	push	r16
 88e:	1f 93       	push	r17
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	82 30       	cpi	r24, 0x02	; 2
 896:	91 05       	cpc	r25, r1
 898:	10 f4       	brcc	.+4      	; 0x89e <malloc+0x12>
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <__flp>
 8a2:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <__flp+0x1>
 8a6:	20 e0       	ldi	r18, 0x00	; 0
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	a0 e0       	ldi	r26, 0x00	; 0
 8ac:	b0 e0       	ldi	r27, 0x00	; 0
 8ae:	30 97       	sbiw	r30, 0x00	; 0
 8b0:	19 f1       	breq	.+70     	; 0x8f8 <malloc+0x6c>
 8b2:	40 81       	ld	r20, Z
 8b4:	51 81       	ldd	r21, Z+1	; 0x01
 8b6:	02 81       	ldd	r16, Z+2	; 0x02
 8b8:	13 81       	ldd	r17, Z+3	; 0x03
 8ba:	48 17       	cp	r20, r24
 8bc:	59 07       	cpc	r21, r25
 8be:	c8 f0       	brcs	.+50     	; 0x8f2 <malloc+0x66>
 8c0:	84 17       	cp	r24, r20
 8c2:	95 07       	cpc	r25, r21
 8c4:	69 f4       	brne	.+26     	; 0x8e0 <malloc+0x54>
 8c6:	10 97       	sbiw	r26, 0x00	; 0
 8c8:	31 f0       	breq	.+12     	; 0x8d6 <malloc+0x4a>
 8ca:	12 96       	adiw	r26, 0x02	; 2
 8cc:	0c 93       	st	X, r16
 8ce:	12 97       	sbiw	r26, 0x02	; 2
 8d0:	13 96       	adiw	r26, 0x03	; 3
 8d2:	1c 93       	st	X, r17
 8d4:	27 c0       	rjmp	.+78     	; 0x924 <malloc+0x98>
 8d6:	00 93 36 02 	sts	0x0236, r16	; 0x800236 <__flp>
 8da:	10 93 37 02 	sts	0x0237, r17	; 0x800237 <__flp+0x1>
 8de:	22 c0       	rjmp	.+68     	; 0x924 <malloc+0x98>
 8e0:	21 15       	cp	r18, r1
 8e2:	31 05       	cpc	r19, r1
 8e4:	19 f0       	breq	.+6      	; 0x8ec <malloc+0x60>
 8e6:	42 17       	cp	r20, r18
 8e8:	53 07       	cpc	r21, r19
 8ea:	18 f4       	brcc	.+6      	; 0x8f2 <malloc+0x66>
 8ec:	9a 01       	movw	r18, r20
 8ee:	bd 01       	movw	r22, r26
 8f0:	ef 01       	movw	r28, r30
 8f2:	df 01       	movw	r26, r30
 8f4:	f8 01       	movw	r30, r16
 8f6:	db cf       	rjmp	.-74     	; 0x8ae <malloc+0x22>
 8f8:	21 15       	cp	r18, r1
 8fa:	31 05       	cpc	r19, r1
 8fc:	f9 f0       	breq	.+62     	; 0x93c <malloc+0xb0>
 8fe:	28 1b       	sub	r18, r24
 900:	39 0b       	sbc	r19, r25
 902:	24 30       	cpi	r18, 0x04	; 4
 904:	31 05       	cpc	r19, r1
 906:	80 f4       	brcc	.+32     	; 0x928 <malloc+0x9c>
 908:	8a 81       	ldd	r24, Y+2	; 0x02
 90a:	9b 81       	ldd	r25, Y+3	; 0x03
 90c:	61 15       	cp	r22, r1
 90e:	71 05       	cpc	r23, r1
 910:	21 f0       	breq	.+8      	; 0x91a <malloc+0x8e>
 912:	fb 01       	movw	r30, r22
 914:	93 83       	std	Z+3, r25	; 0x03
 916:	82 83       	std	Z+2, r24	; 0x02
 918:	04 c0       	rjmp	.+8      	; 0x922 <malloc+0x96>
 91a:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <__flp+0x1>
 91e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__flp>
 922:	fe 01       	movw	r30, r28
 924:	32 96       	adiw	r30, 0x02	; 2
 926:	44 c0       	rjmp	.+136    	; 0x9b0 <malloc+0x124>
 928:	fe 01       	movw	r30, r28
 92a:	e2 0f       	add	r30, r18
 92c:	f3 1f       	adc	r31, r19
 92e:	81 93       	st	Z+, r24
 930:	91 93       	st	Z+, r25
 932:	22 50       	subi	r18, 0x02	; 2
 934:	31 09       	sbc	r19, r1
 936:	39 83       	std	Y+1, r19	; 0x01
 938:	28 83       	st	Y, r18
 93a:	3a c0       	rjmp	.+116    	; 0x9b0 <malloc+0x124>
 93c:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__data_end>
 940:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__data_end+0x1>
 944:	23 2b       	or	r18, r19
 946:	41 f4       	brne	.+16     	; 0x958 <malloc+0xcc>
 948:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 94c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 950:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <__data_end+0x1>
 954:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <__data_end>
 958:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 95c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 960:	21 15       	cp	r18, r1
 962:	31 05       	cpc	r19, r1
 964:	41 f4       	brne	.+16     	; 0x976 <malloc+0xea>
 966:	2d b7       	in	r18, 0x3d	; 61
 968:	3e b7       	in	r19, 0x3e	; 62
 96a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 96e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 972:	24 1b       	sub	r18, r20
 974:	35 0b       	sbc	r19, r21
 976:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <__data_end>
 97a:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <__data_end+0x1>
 97e:	e2 17       	cp	r30, r18
 980:	f3 07       	cpc	r31, r19
 982:	a0 f4       	brcc	.+40     	; 0x9ac <malloc+0x120>
 984:	2e 1b       	sub	r18, r30
 986:	3f 0b       	sbc	r19, r31
 988:	28 17       	cp	r18, r24
 98a:	39 07       	cpc	r19, r25
 98c:	78 f0       	brcs	.+30     	; 0x9ac <malloc+0x120>
 98e:	ac 01       	movw	r20, r24
 990:	4e 5f       	subi	r20, 0xFE	; 254
 992:	5f 4f       	sbci	r21, 0xFF	; 255
 994:	24 17       	cp	r18, r20
 996:	35 07       	cpc	r19, r21
 998:	48 f0       	brcs	.+18     	; 0x9ac <malloc+0x120>
 99a:	4e 0f       	add	r20, r30
 99c:	5f 1f       	adc	r21, r31
 99e:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <__data_end+0x1>
 9a2:	40 93 34 02 	sts	0x0234, r20	; 0x800234 <__data_end>
 9a6:	81 93       	st	Z+, r24
 9a8:	91 93       	st	Z+, r25
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <malloc+0x124>
 9ac:	e0 e0       	ldi	r30, 0x00	; 0
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	cf 01       	movw	r24, r30
 9b2:	df 91       	pop	r29
 9b4:	cf 91       	pop	r28
 9b6:	1f 91       	pop	r17
 9b8:	0f 91       	pop	r16
 9ba:	08 95       	ret

000009bc <free>:
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	00 97       	sbiw	r24, 0x00	; 0
 9c2:	09 f4       	brne	.+2      	; 0x9c6 <free+0xa>
 9c4:	81 c0       	rjmp	.+258    	; 0xac8 <free+0x10c>
 9c6:	fc 01       	movw	r30, r24
 9c8:	32 97       	sbiw	r30, 0x02	; 2
 9ca:	13 82       	std	Z+3, r1	; 0x03
 9cc:	12 82       	std	Z+2, r1	; 0x02
 9ce:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <__flp>
 9d2:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <__flp+0x1>
 9d6:	10 97       	sbiw	r26, 0x00	; 0
 9d8:	81 f4       	brne	.+32     	; 0x9fa <free+0x3e>
 9da:	20 81       	ld	r18, Z
 9dc:	31 81       	ldd	r19, Z+1	; 0x01
 9de:	82 0f       	add	r24, r18
 9e0:	93 1f       	adc	r25, r19
 9e2:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__data_end>
 9e6:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__data_end+0x1>
 9ea:	28 17       	cp	r18, r24
 9ec:	39 07       	cpc	r19, r25
 9ee:	51 f5       	brne	.+84     	; 0xa44 <free+0x88>
 9f0:	f0 93 35 02 	sts	0x0235, r31	; 0x800235 <__data_end+0x1>
 9f4:	e0 93 34 02 	sts	0x0234, r30	; 0x800234 <__data_end>
 9f8:	67 c0       	rjmp	.+206    	; 0xac8 <free+0x10c>
 9fa:	ed 01       	movw	r28, r26
 9fc:	20 e0       	ldi	r18, 0x00	; 0
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	ce 17       	cp	r28, r30
 a02:	df 07       	cpc	r29, r31
 a04:	40 f4       	brcc	.+16     	; 0xa16 <free+0x5a>
 a06:	4a 81       	ldd	r20, Y+2	; 0x02
 a08:	5b 81       	ldd	r21, Y+3	; 0x03
 a0a:	9e 01       	movw	r18, r28
 a0c:	41 15       	cp	r20, r1
 a0e:	51 05       	cpc	r21, r1
 a10:	f1 f0       	breq	.+60     	; 0xa4e <free+0x92>
 a12:	ea 01       	movw	r28, r20
 a14:	f5 cf       	rjmp	.-22     	; 0xa00 <free+0x44>
 a16:	d3 83       	std	Z+3, r29	; 0x03
 a18:	c2 83       	std	Z+2, r28	; 0x02
 a1a:	40 81       	ld	r20, Z
 a1c:	51 81       	ldd	r21, Z+1	; 0x01
 a1e:	84 0f       	add	r24, r20
 a20:	95 1f       	adc	r25, r21
 a22:	c8 17       	cp	r28, r24
 a24:	d9 07       	cpc	r29, r25
 a26:	59 f4       	brne	.+22     	; 0xa3e <free+0x82>
 a28:	88 81       	ld	r24, Y
 a2a:	99 81       	ldd	r25, Y+1	; 0x01
 a2c:	84 0f       	add	r24, r20
 a2e:	95 1f       	adc	r25, r21
 a30:	02 96       	adiw	r24, 0x02	; 2
 a32:	91 83       	std	Z+1, r25	; 0x01
 a34:	80 83       	st	Z, r24
 a36:	8a 81       	ldd	r24, Y+2	; 0x02
 a38:	9b 81       	ldd	r25, Y+3	; 0x03
 a3a:	93 83       	std	Z+3, r25	; 0x03
 a3c:	82 83       	std	Z+2, r24	; 0x02
 a3e:	21 15       	cp	r18, r1
 a40:	31 05       	cpc	r19, r1
 a42:	29 f4       	brne	.+10     	; 0xa4e <free+0x92>
 a44:	f0 93 37 02 	sts	0x0237, r31	; 0x800237 <__flp+0x1>
 a48:	e0 93 36 02 	sts	0x0236, r30	; 0x800236 <__flp>
 a4c:	3d c0       	rjmp	.+122    	; 0xac8 <free+0x10c>
 a4e:	e9 01       	movw	r28, r18
 a50:	fb 83       	std	Y+3, r31	; 0x03
 a52:	ea 83       	std	Y+2, r30	; 0x02
 a54:	49 91       	ld	r20, Y+
 a56:	59 91       	ld	r21, Y+
 a58:	c4 0f       	add	r28, r20
 a5a:	d5 1f       	adc	r29, r21
 a5c:	ec 17       	cp	r30, r28
 a5e:	fd 07       	cpc	r31, r29
 a60:	61 f4       	brne	.+24     	; 0xa7a <free+0xbe>
 a62:	80 81       	ld	r24, Z
 a64:	91 81       	ldd	r25, Z+1	; 0x01
 a66:	84 0f       	add	r24, r20
 a68:	95 1f       	adc	r25, r21
 a6a:	02 96       	adiw	r24, 0x02	; 2
 a6c:	e9 01       	movw	r28, r18
 a6e:	99 83       	std	Y+1, r25	; 0x01
 a70:	88 83       	st	Y, r24
 a72:	82 81       	ldd	r24, Z+2	; 0x02
 a74:	93 81       	ldd	r25, Z+3	; 0x03
 a76:	9b 83       	std	Y+3, r25	; 0x03
 a78:	8a 83       	std	Y+2, r24	; 0x02
 a7a:	e0 e0       	ldi	r30, 0x00	; 0
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	12 96       	adiw	r26, 0x02	; 2
 a80:	8d 91       	ld	r24, X+
 a82:	9c 91       	ld	r25, X
 a84:	13 97       	sbiw	r26, 0x03	; 3
 a86:	00 97       	sbiw	r24, 0x00	; 0
 a88:	19 f0       	breq	.+6      	; 0xa90 <free+0xd4>
 a8a:	fd 01       	movw	r30, r26
 a8c:	dc 01       	movw	r26, r24
 a8e:	f7 cf       	rjmp	.-18     	; 0xa7e <free+0xc2>
 a90:	8d 91       	ld	r24, X+
 a92:	9c 91       	ld	r25, X
 a94:	11 97       	sbiw	r26, 0x01	; 1
 a96:	9d 01       	movw	r18, r26
 a98:	2e 5f       	subi	r18, 0xFE	; 254
 a9a:	3f 4f       	sbci	r19, 0xFF	; 255
 a9c:	82 0f       	add	r24, r18
 a9e:	93 1f       	adc	r25, r19
 aa0:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__data_end>
 aa4:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__data_end+0x1>
 aa8:	28 17       	cp	r18, r24
 aaa:	39 07       	cpc	r19, r25
 aac:	69 f4       	brne	.+26     	; 0xac8 <free+0x10c>
 aae:	30 97       	sbiw	r30, 0x00	; 0
 ab0:	29 f4       	brne	.+10     	; 0xabc <free+0x100>
 ab2:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <__flp+0x1>
 ab6:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <__flp>
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <free+0x104>
 abc:	13 82       	std	Z+3, r1	; 0x03
 abe:	12 82       	std	Z+2, r1	; 0x02
 ac0:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <__data_end+0x1>
 ac4:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <__data_end>
 ac8:	df 91       	pop	r29
 aca:	cf 91       	pop	r28
 acc:	08 95       	ret

00000ace <tolower>:
 ace:	91 11       	cpse	r25, r1
 ad0:	08 95       	ret
 ad2:	81 54       	subi	r24, 0x41	; 65
 ad4:	8a 51       	subi	r24, 0x1A	; 26
 ad6:	08 f4       	brcc	.+2      	; 0xada <tolower+0xc>
 ad8:	80 5e       	subi	r24, 0xE0	; 224
 ada:	85 5a       	subi	r24, 0xA5	; 165
 adc:	08 95       	ret

00000ade <_exit>:
 ade:	f8 94       	cli

00000ae0 <__stop_program>:
 ae0:	ff cf       	rjmp	.-2      	; 0xae0 <__stop_program>
