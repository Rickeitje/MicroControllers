
ScrollingText8x8Matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00000b32  00000bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800234  00800234  00000cfa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cfa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7a  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a67  00000000  00000000  00001d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c8  00000000  00000000  000027d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000030a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077a  00000000  00000000  000036a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003e23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5f c0       	rjmp	.+190    	; 0xc0 <__ctors_end>
   2:	00 00       	nop
   4:	7a c0       	rjmp	.+244    	; 0xfa <__bad_interrupt>
   6:	00 00       	nop
   8:	78 c0       	rjmp	.+240    	; 0xfa <__bad_interrupt>
   a:	00 00       	nop
   c:	76 c0       	rjmp	.+236    	; 0xfa <__bad_interrupt>
   e:	00 00       	nop
  10:	74 c0       	rjmp	.+232    	; 0xfa <__bad_interrupt>
  12:	00 00       	nop
  14:	72 c0       	rjmp	.+228    	; 0xfa <__bad_interrupt>
  16:	00 00       	nop
  18:	70 c0       	rjmp	.+224    	; 0xfa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6e c0       	rjmp	.+220    	; 0xfa <__bad_interrupt>
  1e:	00 00       	nop
  20:	6c c0       	rjmp	.+216    	; 0xfa <__bad_interrupt>
  22:	00 00       	nop
  24:	6a c0       	rjmp	.+212    	; 0xfa <__bad_interrupt>
  26:	00 00       	nop
  28:	68 c0       	rjmp	.+208    	; 0xfa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	66 c0       	rjmp	.+204    	; 0xfa <__bad_interrupt>
  2e:	00 00       	nop
  30:	64 c0       	rjmp	.+200    	; 0xfa <__bad_interrupt>
  32:	00 00       	nop
  34:	62 c0       	rjmp	.+196    	; 0xfa <__bad_interrupt>
  36:	00 00       	nop
  38:	60 c0       	rjmp	.+192    	; 0xfa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5e c0       	rjmp	.+188    	; 0xfa <__bad_interrupt>
  3e:	00 00       	nop
  40:	5c c0       	rjmp	.+184    	; 0xfa <__bad_interrupt>
  42:	00 00       	nop
  44:	5a c0       	rjmp	.+180    	; 0xfa <__bad_interrupt>
  46:	00 00       	nop
  48:	58 c0       	rjmp	.+176    	; 0xfa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	56 c0       	rjmp	.+172    	; 0xfa <__bad_interrupt>
  4e:	00 00       	nop
  50:	54 c0       	rjmp	.+168    	; 0xfa <__bad_interrupt>
  52:	00 00       	nop
  54:	52 c0       	rjmp	.+164    	; 0xfa <__bad_interrupt>
  56:	00 00       	nop
  58:	50 c0       	rjmp	.+160    	; 0xfa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4e c0       	rjmp	.+156    	; 0xfa <__bad_interrupt>
  5e:	00 00       	nop
  60:	4c c0       	rjmp	.+152    	; 0xfa <__bad_interrupt>
  62:	00 00       	nop
  64:	4a c0       	rjmp	.+148    	; 0xfa <__bad_interrupt>
  66:	00 00       	nop
  68:	48 c0       	rjmp	.+144    	; 0xfa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	46 c0       	rjmp	.+140    	; 0xfa <__bad_interrupt>
  6e:	00 00       	nop
  70:	44 c0       	rjmp	.+136    	; 0xfa <__bad_interrupt>
  72:	00 00       	nop
  74:	42 c0       	rjmp	.+132    	; 0xfa <__bad_interrupt>
  76:	00 00       	nop
  78:	40 c0       	rjmp	.+128    	; 0xfa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3e c0       	rjmp	.+124    	; 0xfa <__bad_interrupt>
  7e:	00 00       	nop
  80:	3c c0       	rjmp	.+120    	; 0xfa <__bad_interrupt>
  82:	00 00       	nop
  84:	3a c0       	rjmp	.+116    	; 0xfa <__bad_interrupt>
  86:	00 00       	nop
  88:	38 c0       	rjmp	.+112    	; 0xfa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 02       	muls	r20, r18
  8e:	51 02       	muls	r21, r17
  90:	60 02       	muls	r22, r16
  92:	70 02       	muls	r23, r16
  94:	80 02       	muls	r24, r16
  96:	90 02       	muls	r25, r16
  98:	a0 02       	muls	r26, r16
  9a:	b0 02       	muls	r27, r16
  9c:	c0 02       	muls	r28, r16
  9e:	d0 02       	muls	r29, r16
  a0:	e0 02       	muls	r30, r16
  a2:	f0 02       	muls	r31, r16
  a4:	00 03       	mulsu	r16, r16
  a6:	10 03       	mulsu	r17, r16
  a8:	20 03       	mulsu	r18, r16
  aa:	30 03       	mulsu	r19, r16
  ac:	40 03       	mulsu	r20, r16
  ae:	50 03       	mulsu	r21, r16
  b0:	60 03       	mulsu	r22, r16
  b2:	70 03       	mulsu	r23, r16
  b4:	80 03       	fmuls	r16, r16
  b6:	90 03       	fmuls	r17, r16
  b8:	a0 03       	fmuls	r18, r16
  ba:	b0 03       	fmuls	r19, r16
  bc:	c0 03       	fmuls	r20, r16
  be:	d0 03       	fmuls	r21, r16

000000c0 <__ctors_end>:
  c0:	11 24       	eor	r1, r1
  c2:	1f be       	out	0x3f, r1	; 63
  c4:	cf ef       	ldi	r28, 0xFF	; 255
  c6:	d0 e1       	ldi	r29, 0x10	; 16
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
  cc:	12 e0       	ldi	r17, 0x02	; 2
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b1 e0       	ldi	r27, 0x01	; 1
  d2:	e2 e3       	ldi	r30, 0x32	; 50
  d4:	fb e0       	ldi	r31, 0x0B	; 11
  d6:	00 e0       	ldi	r16, 0x00	; 0
  d8:	0b bf       	out	0x3b, r16	; 59
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x14>
  dc:	07 90       	elpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a4 33       	cpi	r26, 0x34	; 52
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0x10>

000000e6 <__do_clear_bss>:
  e6:	22 e0       	ldi	r18, 0x02	; 2
  e8:	a4 e3       	ldi	r26, 0x34	; 52
  ea:	b2 e0       	ldi	r27, 0x02	; 2
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a8 33       	cpi	r26, 0x38	; 56
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
  f6:	6e d0       	rcall	.+220    	; 0x1d4 <main>
  f8:	1a c5       	rjmp	.+2612   	; 0xb2e <_exit>

000000fa <__bad_interrupt>:
  fa:	82 cf       	rjmp	.-252    	; 0x0 <__vectors>

000000fc <twi_start>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  fc:	84 ea       	ldi	r24, 0xA4	; 164
  fe:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 102:	e4 e7       	ldi	r30, 0x74	; 116
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <twi_start+0xa>
 10c:	08 95       	ret

0000010e <twi_tx>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 10e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 118:	e4 e7       	ldi	r30, 0x74	; 116
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	ec f7       	brge	.-6      	; 0x11c <twi_tx+0xe>
}
 122:	08 95       	ret

00000124 <twi_init>:
inputs:			
outputs:	
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
	TWSR = 0;
 12a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	
	twi_start();
 134:	e3 df       	rcall	.-58     	; 0xfc <twi_start>
	twi_tx(0xE0);    // Display I2C addres + R/W bit
 136:	80 ee       	ldi	r24, 0xE0	; 224
 138:	ea df       	rcall	.-44     	; 0x10e <twi_tx>
	twi_tx(0x21);    // Internal osc on (page 10 HT16K33)
 13a:	81 e2       	ldi	r24, 0x21	; 33
 13c:	e8 df       	rcall	.-48     	; 0x10e <twi_tx>
 13e:	c4 e7       	ldi	r28, 0x74	; 116
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	14 e9       	ldi	r17, 0x94	; 148
 144:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);    // Display I2C addres + R/W bit
	twi_tx(0x21);    // Internal osc on (page 10 HT16K33)
	twi_stop();

	twi_start();
 146:	da df       	rcall	.-76     	; 0xfc <twi_start>
	twi_tx(0xE0);    // Display I2C address + R/W bit
 148:	80 ee       	ldi	r24, 0xE0	; 224
 14a:	e1 df       	rcall	.-62     	; 0x10e <twi_tx>
	twi_tx(0xA0);    // HT16K33 pins all output
 14c:	80 ea       	ldi	r24, 0xA0	; 160
 14e:	df df       	rcall	.-66     	; 0x10e <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 150:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);    // Display I2C address + R/W bit
	twi_tx(0xA0);    // HT16K33 pins all output
	twi_stop();

	twi_start();
 152:	d4 df       	rcall	.-88     	; 0xfc <twi_start>
	twi_tx(0xE0);    // Display I2C address + R/W bit
 154:	80 ee       	ldi	r24, 0xE0	; 224
 156:	db df       	rcall	.-74     	; 0x10e <twi_tx>
	twi_tx(0xE3);    // Display Dimming 4/16 duty cycle
 158:	83 ee       	ldi	r24, 0xE3	; 227
 15a:	d9 df       	rcall	.-78     	; 0x10e <twi_tx>
 15c:	18 83       	st	Y, r17
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 15e:	ce df       	rcall	.-100    	; 0xfc <twi_start>
	twi_start();
	twi_tx(0xE0);    // Display I2C address + R/W bit
	twi_tx(0xE3);    // Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 160:	80 ee       	ldi	r24, 0xE0	; 224
 162:	d5 df       	rcall	.-86     	; 0x10e <twi_tx>
	twi_tx(0xE0);    // Display I2C address + R/W bit
 164:	81 e8       	ldi	r24, 0x81	; 129
 166:	d3 df       	rcall	.-90     	; 0x10e <twi_tx>
 168:	18 83       	st	Y, r17
	twi_tx(0x81);    // Display OFF - Blink On
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 170:	08 95       	ret

00000172 <wait>:

	twi_start();
	twi_tx(0xE0);    // Display I2C address + R/W bit
	twi_tx(0x81);    // Display OFF - Blink On
	twi_stop();
}
 172:	18 16       	cp	r1, r24
 174:	19 06       	cpc	r1, r25
 176:	6c f4       	brge	.+26     	; 0x192 <wait+0x20>
 178:	20 e0       	ldi	r18, 0x00	; 0
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 17a:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	e9 ef       	ldi	r30, 0xF9	; 249
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <wait+0xe>
 184:	00 c0       	rjmp	.+0      	; 0x186 <wait+0x14>
 186:	00 00       	nop
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	82 17       	cp	r24, r18
 18e:	93 07       	cpc	r25, r19
 190:	a9 f7       	brne	.-22     	; 0x17c <wait+0xa>
 192:	08 95       	ret

00000194 <writeData>:


/************************************************************************/
/* Write data to the dot matrix                                                                     */
/************************************************************************/
void writeData(int adress, int data){
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	d8 2f       	mov	r29, r24
 19a:	c6 2f       	mov	r28, r22
	twi_start();
 19c:	af df       	rcall	.-162    	; 0xfc <twi_start>
	twi_tx(0xE0);    // Display I2C addres + R/W bit
 19e:	80 ee       	ldi	r24, 0xE0	; 224
 1a0:	b6 df       	rcall	.-148    	; 0x10e <twi_tx>
	twi_tx(adress);    // Address
 1a2:	8d 2f       	mov	r24, r29
 1a4:	b4 df       	rcall	.-152    	; 0x10e <twi_tx>
	twi_tx(data);    // data
 1a6:	8c 2f       	mov	r24, r28
 1a8:	b2 df       	rcall	.-156    	; 0x10e <twi_tx>
 1aa:	84 e9       	ldi	r24, 0x94	; 148
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1ac:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1b0:	df 91       	pop	r29
	twi_start();
	twi_tx(0xE0);    // Display I2C addres + R/W bit
	twi_tx(adress);    // Address
	twi_tx(data);    // data
	twi_stop();
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <clearMatrix>:
#include <util/delay.h>
#include <string.h>
#include "ledmatrix.h"
#include "textutil.h"

void clearMatrix(void){
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
	int i;
	for(i = 0x00; i < 0x10; i++){
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
		writeData(i, 0);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	ce 01       	movw	r24, r28
 1c4:	e7 df       	rcall	.-50     	; 0x194 <writeData>
#include "ledmatrix.h"
#include "textutil.h"

void clearMatrix(void){
	int i;
	for(i = 0x00; i < 0x10; i++){
 1c6:	21 96       	adiw	r28, 0x01	; 1
 1c8:	c0 31       	cpi	r28, 0x10	; 16
 1ca:	d1 05       	cpc	r29, r1
 1cc:	c1 f7       	brne	.-16     	; 0x1be <clearMatrix+0x8>
		writeData(i, 0);
	}
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:

int main(void){
	DDRA = 0b11111111;
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	8a bb       	out	0x1a, r24	; 26

	EICRB |= 0b11000000; //set INT7 faling edge
 1d8:	8a b7       	in	r24, 0x3a	; 58
 1da:	80 6c       	ori	r24, 0xC0	; 192
 1dc:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= 0b10000000; //enable INT&
 1de:	89 b7       	in	r24, 0x39	; 57
 1e0:	80 68       	ori	r24, 0x80	; 128
 1e2:	89 bf       	out	0x39, r24	; 57
	//enable global interrupt system
	
	
	twi_init();
 1e4:	9f df       	rcall	.-194    	; 0x124 <twi_init>
	sei();
	
	//int data[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f, 0x04, 0x04, 0x04, 0x3f,0x00, 0x3f, 0x21, 0x21, 0x21, 0x3f,0x00, 0x21, 0x21, 0x3f, 0x21, 0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	
	
	clearMatrix();
 1e6:	78 94       	sei
	
	stringToTextArray();
 1e8:	e6 df       	rcall	.-52     	; 0x1b6 <clearMatrix>
 1ea:	03 d0       	rcall	.+6      	; 0x1f2 <stringToTextArray>
	
	
	
	return 1;
}
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	08 95       	ret

000001f2 <stringToTextArray>:
#include <string.h>
#include <stdlib.h>
#include "textutil.h"
#include "ledmatrix.h"

void stringToTextArray(){
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	cd 52       	subi	r28, 0x2D	; 45
 1fc:	d1 40       	sbci	r29, 0x01	; 1
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61

	int *text = malloc(100 * sizeof(int));
 208:	88 ec       	ldi	r24, 0xC8	; 200
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	67 d3       	rcall	.+1742   	; 0x8dc <malloc>
 20e:	5c 01       	movw	r10, r24
	char data[] = "The quick brown fox jumped over the lazy dog";
 210:	2d e2       	ldi	r18, 0x2D	; 45
 212:	e6 e0       	ldi	r30, 0x06	; 6
 214:	f2 e0       	ldi	r31, 0x02	; 2
 216:	ce 01       	movw	r24, r28
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	dc 01       	movw	r26, r24
 21c:	01 90       	ld	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	2a 95       	dec	r18
 222:	e1 f7       	brne	.-8      	; 0x21c <stringToTextArray+0x2a>
	int length = strlen(data);
 224:	fc 01       	movw	r30, r24
 226:	01 90       	ld	r0, Z+
 228:	00 20       	and	r0, r0
 22a:	e9 f7       	brne	.-6      	; 0x226 <stringToTextArray+0x34>
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	6f 01       	movw	r12, r30
 230:	c8 1a       	sub	r12, r24
 232:	d9 0a       	sbc	r13, r25
 234:	96 01       	movw	r18, r12
 236:	f5 01       	movw	r30, r10
 238:	c5 01       	movw	r24, r10
 23a:	40 96       	adiw	r24, 0x10	; 16
	
	int offset;
	for(offset = 0; offset < 8; offset++){
		text[offset] = 0x00;
 23c:	11 92       	st	Z+, r1
 23e:	11 92       	st	Z+, r1
	int *text = malloc(100 * sizeof(int));
	char data[] = "The quick brown fox jumped over the lazy dog";
	int length = strlen(data);
	
	int offset;
	for(offset = 0; offset < 8; offset++){
 240:	e8 17       	cp	r30, r24
 242:	f9 07       	cpc	r31, r25
 244:	d9 f7       	brne	.-10     	; 0x23c <stringToTextArray+0x4a>
		text[offset] = 0x00;
	}
	
	int A[5] = {0x3e, 0x09, 0x09, 0x09, 0x3e};
 246:	8a e0       	ldi	r24, 0x0A	; 10
 248:	e6 e0       	ldi	r30, 0x06	; 6
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	de 01       	movw	r26, r28
 24e:	9e 96       	adiw	r26, 0x2e	; 46
 250:	01 90       	ld	r0, Z+
 252:	0d 92       	st	X+, r0
 254:	8a 95       	dec	r24
 256:	e1 f7       	brne	.-8      	; 0x250 <stringToTextArray+0x5e>
	int B[5] = {0x3f, 0x25, 0x25, 0x25, 0x1a};
 258:	8a e0       	ldi	r24, 0x0A	; 10
 25a:	e0 e1       	ldi	r30, 0x10	; 16
 25c:	f1 e0       	ldi	r31, 0x01	; 1
 25e:	de 01       	movw	r26, r28
 260:	d8 96       	adiw	r26, 0x38	; 56
 262:	01 90       	ld	r0, Z+
 264:	0d 92       	st	X+, r0
 266:	8a 95       	dec	r24
 268:	e1 f7       	brne	.-8      	; 0x262 <stringToTextArray+0x70>
	int C[5] = {0x1e, 0x21, 0x21, 0x21, 0x21};
 26a:	8a e0       	ldi	r24, 0x0A	; 10
 26c:	ea e1       	ldi	r30, 0x1A	; 26
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	de 01       	movw	r26, r28
 272:	ae 5b       	subi	r26, 0xBE	; 190
 274:	bf 4f       	sbci	r27, 0xFF	; 255
 276:	01 90       	ld	r0, Z+
 278:	0d 92       	st	X+, r0
 27a:	8a 95       	dec	r24
 27c:	e1 f7       	brne	.-8      	; 0x276 <stringToTextArray+0x84>
	int D[5] = {0x3f, 0x21, 0x21, 0x21, 0x1e};
 27e:	8a e0       	ldi	r24, 0x0A	; 10
 280:	e4 e2       	ldi	r30, 0x24	; 36
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	de 01       	movw	r26, r28
 286:	a4 5b       	subi	r26, 0xB4	; 180
 288:	bf 4f       	sbci	r27, 0xFF	; 255
 28a:	01 90       	ld	r0, Z+
 28c:	0d 92       	st	X+, r0
 28e:	8a 95       	dec	r24
 290:	e1 f7       	brne	.-8      	; 0x28a <stringToTextArray+0x98>
	int E[5] = {0x3f, 0x25, 0x25, 0x21, 0x21};
 292:	8a e0       	ldi	r24, 0x0A	; 10
 294:	ee e2       	ldi	r30, 0x2E	; 46
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	de 01       	movw	r26, r28
 29a:	aa 5a       	subi	r26, 0xAA	; 170
 29c:	bf 4f       	sbci	r27, 0xFF	; 255
 29e:	01 90       	ld	r0, Z+
 2a0:	0d 92       	st	X+, r0
 2a2:	8a 95       	dec	r24
 2a4:	e1 f7       	brne	.-8      	; 0x29e <stringToTextArray+0xac>
	int F[5] = {0x3f, 0x05, 0x05, 0x05, 0x01};
 2a6:	8a e0       	ldi	r24, 0x0A	; 10
 2a8:	e8 e3       	ldi	r30, 0x38	; 56
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	de 01       	movw	r26, r28
 2ae:	a0 5a       	subi	r26, 0xA0	; 160
 2b0:	bf 4f       	sbci	r27, 0xFF	; 255
 2b2:	01 90       	ld	r0, Z+
 2b4:	0d 92       	st	X+, r0
 2b6:	8a 95       	dec	r24
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <stringToTextArray+0xc0>
	int G[5] = {0x3f, 0x21, 0x25, 0x25, 0x3d};
 2ba:	8a e0       	ldi	r24, 0x0A	; 10
 2bc:	e2 e4       	ldi	r30, 0x42	; 66
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	de 01       	movw	r26, r28
 2c2:	a6 59       	subi	r26, 0x96	; 150
 2c4:	bf 4f       	sbci	r27, 0xFF	; 255
 2c6:	01 90       	ld	r0, Z+
 2c8:	0d 92       	st	X+, r0
 2ca:	8a 95       	dec	r24
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <stringToTextArray+0xd4>
	int H[5] = {0x3f, 0x04, 0x04, 0x04, 0x3f};
 2ce:	8a e0       	ldi	r24, 0x0A	; 10
 2d0:	ec e4       	ldi	r30, 0x4C	; 76
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
 2d4:	de 01       	movw	r26, r28
 2d6:	ac 58       	subi	r26, 0x8C	; 140
 2d8:	bf 4f       	sbci	r27, 0xFF	; 255
 2da:	01 90       	ld	r0, Z+
 2dc:	0d 92       	st	X+, r0
 2de:	8a 95       	dec	r24
 2e0:	e1 f7       	brne	.-8      	; 0x2da <stringToTextArray+0xe8>
	int I[5] = {0x21, 0x21, 0x3f, 0x21, 0x21};
 2e2:	8a e0       	ldi	r24, 0x0A	; 10
 2e4:	e6 e5       	ldi	r30, 0x56	; 86
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	de 01       	movw	r26, r28
 2ea:	a2 58       	subi	r26, 0x82	; 130
 2ec:	bf 4f       	sbci	r27, 0xFF	; 255
 2ee:	01 90       	ld	r0, Z+
 2f0:	0d 92       	st	X+, r0
 2f2:	8a 95       	dec	r24
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <stringToTextArray+0xfc>
	int J[4] = {0x31, 0x21, 0x21, 0x3f};
 2f6:	88 e0       	ldi	r24, 0x08	; 8
 2f8:	e0 e6       	ldi	r30, 0x60	; 96
 2fa:	f1 e0       	ldi	r31, 0x01	; 1
 2fc:	de 01       	movw	r26, r28
 2fe:	a8 57       	subi	r26, 0x78	; 120
 300:	bf 4f       	sbci	r27, 0xFF	; 255
 302:	01 90       	ld	r0, Z+
 304:	0d 92       	st	X+, r0
 306:	8a 95       	dec	r24
 308:	e1 f7       	brne	.-8      	; 0x302 <stringToTextArray+0x110>
	int K[4] = {0x3f, 0x04, 0x0a, 0x31};
 30a:	88 e0       	ldi	r24, 0x08	; 8
 30c:	e8 e6       	ldi	r30, 0x68	; 104
 30e:	f1 e0       	ldi	r31, 0x01	; 1
 310:	de 01       	movw	r26, r28
 312:	a0 57       	subi	r26, 0x70	; 112
 314:	bf 4f       	sbci	r27, 0xFF	; 255
 316:	01 90       	ld	r0, Z+
 318:	0d 92       	st	X+, r0
 31a:	8a 95       	dec	r24
 31c:	e1 f7       	brne	.-8      	; 0x316 <stringToTextArray+0x124>
	int L[4] = {0x3f, 0x20, 0x20, 0x20};
 31e:	88 e0       	ldi	r24, 0x08	; 8
 320:	e0 e7       	ldi	r30, 0x70	; 112
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	de 01       	movw	r26, r28
 326:	a8 56       	subi	r26, 0x68	; 104
 328:	bf 4f       	sbci	r27, 0xFF	; 255
 32a:	01 90       	ld	r0, Z+
 32c:	0d 92       	st	X+, r0
 32e:	8a 95       	dec	r24
 330:	e1 f7       	brne	.-8      	; 0x32a <stringToTextArray+0x138>
	int M[5] = {0x3f, 0x01, 0x07, 0x01, 0x3f};
 332:	8a e0       	ldi	r24, 0x0A	; 10
 334:	e8 e7       	ldi	r30, 0x78	; 120
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	de 01       	movw	r26, r28
 33a:	a0 56       	subi	r26, 0x60	; 96
 33c:	bf 4f       	sbci	r27, 0xFF	; 255
 33e:	01 90       	ld	r0, Z+
 340:	0d 92       	st	X+, r0
 342:	8a 95       	dec	r24
 344:	e1 f7       	brne	.-8      	; 0x33e <stringToTextArray+0x14c>
	int N[5] = {0x3f, 0x02, 0x04, 0x08, 0x3f};
 346:	8a e0       	ldi	r24, 0x0A	; 10
 348:	e2 e8       	ldi	r30, 0x82	; 130
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	de 01       	movw	r26, r28
 34e:	a6 55       	subi	r26, 0x56	; 86
 350:	bf 4f       	sbci	r27, 0xFF	; 255
 352:	01 90       	ld	r0, Z+
 354:	0d 92       	st	X+, r0
 356:	8a 95       	dec	r24
 358:	e1 f7       	brne	.-8      	; 0x352 <stringToTextArray+0x160>
	int O[5] = {0x3f, 0x21, 0x21, 0x21, 0x3f};
 35a:	8a e0       	ldi	r24, 0x0A	; 10
 35c:	ec e8       	ldi	r30, 0x8C	; 140
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	de 01       	movw	r26, r28
 362:	ac 54       	subi	r26, 0x4C	; 76
 364:	bf 4f       	sbci	r27, 0xFF	; 255
 366:	01 90       	ld	r0, Z+
 368:	0d 92       	st	X+, r0
 36a:	8a 95       	dec	r24
 36c:	e1 f7       	brne	.-8      	; 0x366 <stringToTextArray+0x174>
	int P[5] = {0x3f, 0x09, 0x09, 0x09, 0x06};
 36e:	8a e0       	ldi	r24, 0x0A	; 10
 370:	e6 e9       	ldi	r30, 0x96	; 150
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	de 01       	movw	r26, r28
 376:	a2 54       	subi	r26, 0x42	; 66
 378:	bf 4f       	sbci	r27, 0xFF	; 255
 37a:	01 90       	ld	r0, Z+
 37c:	0d 92       	st	X+, r0
 37e:	8a 95       	dec	r24
 380:	e1 f7       	brne	.-8      	; 0x37a <stringToTextArray+0x188>
	int Q[5] = {0x06, 0x09, 0x09, 0x09, 0x3f};
 382:	8a e0       	ldi	r24, 0x0A	; 10
 384:	e0 ea       	ldi	r30, 0xA0	; 160
 386:	f1 e0       	ldi	r31, 0x01	; 1
 388:	de 01       	movw	r26, r28
 38a:	a8 53       	subi	r26, 0x38	; 56
 38c:	bf 4f       	sbci	r27, 0xFF	; 255
 38e:	01 90       	ld	r0, Z+
 390:	0d 92       	st	X+, r0
 392:	8a 95       	dec	r24
 394:	e1 f7       	brne	.-8      	; 0x38e <stringToTextArray+0x19c>
	int R[5] = {0x3f, 0x09, 0x19, 0x29, 0x06};
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	ea ea       	ldi	r30, 0xAA	; 170
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	de 01       	movw	r26, r28
 39e:	ae 52       	subi	r26, 0x2E	; 46
 3a0:	bf 4f       	sbci	r27, 0xFF	; 255
 3a2:	01 90       	ld	r0, Z+
 3a4:	0d 92       	st	X+, r0
 3a6:	8a 95       	dec	r24
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <stringToTextArray+0x1b0>
	int S[5] = {0x16, 0x25, 0x25, 0x29, 0x1a};
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	e4 eb       	ldi	r30, 0xB4	; 180
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	de 01       	movw	r26, r28
 3b2:	a4 52       	subi	r26, 0x24	; 36
 3b4:	bf 4f       	sbci	r27, 0xFF	; 255
 3b6:	01 90       	ld	r0, Z+
 3b8:	0d 92       	st	X+, r0
 3ba:	8a 95       	dec	r24
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <stringToTextArray+0x1c4>
	int T[5] = {0x01, 0x01, 0x3f, 0x01, 0x01};
 3be:	8a e0       	ldi	r24, 0x0A	; 10
 3c0:	ee eb       	ldi	r30, 0xBE	; 190
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	de 01       	movw	r26, r28
 3c6:	aa 51       	subi	r26, 0x1A	; 26
 3c8:	bf 4f       	sbci	r27, 0xFF	; 255
 3ca:	01 90       	ld	r0, Z+
 3cc:	0d 92       	st	X+, r0
 3ce:	8a 95       	dec	r24
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <stringToTextArray+0x1d8>
	int U[5] = {0x0f, 0x10, 0x10, 0x08, 0x1f};
 3d2:	8a e0       	ldi	r24, 0x0A	; 10
 3d4:	e8 ec       	ldi	r30, 0xC8	; 200
 3d6:	f1 e0       	ldi	r31, 0x01	; 1
 3d8:	de 01       	movw	r26, r28
 3da:	a0 51       	subi	r26, 0x10	; 16
 3dc:	bf 4f       	sbci	r27, 0xFF	; 255
 3de:	01 90       	ld	r0, Z+
 3e0:	0d 92       	st	X+, r0
 3e2:	8a 95       	dec	r24
 3e4:	e1 f7       	brne	.-8      	; 0x3de <stringToTextArray+0x1ec>
	int V[5] = {0x07, 0x08, 0x10, 0x08, 0x07};
 3e6:	8a e0       	ldi	r24, 0x0A	; 10
 3e8:	e2 ed       	ldi	r30, 0xD2	; 210
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	de 01       	movw	r26, r28
 3ee:	a6 50       	subi	r26, 0x06	; 6
 3f0:	bf 4f       	sbci	r27, 0xFF	; 255
 3f2:	01 90       	ld	r0, Z+
 3f4:	0d 92       	st	X+, r0
 3f6:	8a 95       	dec	r24
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <stringToTextArray+0x200>
	int W[5] = {0x1f, 0x20, 0x1c, 0x20, 0x1f};
 3fa:	8a e0       	ldi	r24, 0x0A	; 10
 3fc:	ec ed       	ldi	r30, 0xDC	; 220
 3fe:	f1 e0       	ldi	r31, 0x01	; 1
 400:	de 01       	movw	r26, r28
 402:	ac 5f       	subi	r26, 0xFC	; 252
 404:	be 4f       	sbci	r27, 0xFE	; 254
 406:	01 90       	ld	r0, Z+
 408:	0d 92       	st	X+, r0
 40a:	8a 95       	dec	r24
 40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	int X[5] = {0x11, 0x0a, 0x04, 0x0a, 0x11};
 40e:	8a e0       	ldi	r24, 0x0A	; 10
 410:	e6 ee       	ldi	r30, 0xE6	; 230
 412:	f1 e0       	ldi	r31, 0x01	; 1
 414:	de 01       	movw	r26, r28
 416:	a2 5f       	subi	r26, 0xF2	; 242
 418:	be 4f       	sbci	r27, 0xFE	; 254
 41a:	01 90       	ld	r0, Z+
 41c:	0d 92       	st	X+, r0
 41e:	8a 95       	dec	r24
 420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	int Y[5] = {0x22, 0x14, 0x08, 0x04, 0x02};
 422:	8a e0       	ldi	r24, 0x0A	; 10
 424:	e0 ef       	ldi	r30, 0xF0	; 240
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	de 01       	movw	r26, r28
 42a:	a8 5e       	subi	r26, 0xE8	; 232
 42c:	be 4f       	sbci	r27, 0xFE	; 254
 42e:	01 90       	ld	r0, Z+
 430:	0d 92       	st	X+, r0
 432:	8a 95       	dec	r24
 434:	e1 f7       	brne	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	int Z[6] = {0x41, 0x61, 0x51, 0x49, 0x45, 0x43};
 436:	8c e0       	ldi	r24, 0x0C	; 12
 438:	ea ef       	ldi	r30, 0xFA	; 250
 43a:	f1 e0       	ldi	r31, 0x01	; 1
 43c:	de 01       	movw	r26, r28
 43e:	ae 5d       	subi	r26, 0xDE	; 222
 440:	be 4f       	sbci	r27, 0xFE	; 254
 442:	01 90       	ld	r0, Z+
 444:	0d 92       	st	X+, r0
 446:	8a 95       	dec	r24
 448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	
	int i;
	for(i = 0; i < length; i++){
 44a:	12 16       	cp	r1, r18
 44c:	13 06       	cpc	r1, r19
 44e:	0c f0       	brlt	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 450:	d6 c1       	rjmp	.+940    	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
 452:	ce 01       	movw	r24, r28
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	7c 01       	movw	r14, r24
 458:	c8 0e       	add	r12, r24
 45a:	d9 1e       	adc	r13, r25
	int *text = malloc(100 * sizeof(int));
	char data[] = "The quick brown fox jumped over the lazy dog";
	int length = strlen(data);
	
	int offset;
	for(offset = 0; offset < 8; offset++){
 45c:	08 e0       	ldi	r16, 0x08	; 8
 45e:	10 e0       	ldi	r17, 0x00	; 0
			case 'z':
			memcpy(text + offset, Z, sizeof(Z));
			offset += sizeof(Z) / 2;
			break;
			default:
			memcpy(text + offset, 0x00, sizeof(int));
 460:	81 2c       	mov	r8, r1
 462:	91 2c       	mov	r9, r1
	int Y[5] = {0x22, 0x14, 0x08, 0x04, 0x02};
	int Z[6] = {0x41, 0x61, 0x51, 0x49, 0x45, 0x43};
	
	int i;
	for(i = 0; i < length; i++){
		char letter = tolower(data[i]);
 464:	d7 01       	movw	r26, r14
 466:	8d 91       	ld	r24, X+
 468:	7d 01       	movw	r14, r26
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	58 d3       	rcall	.+1712   	; 0xb1e <tolower>
		
		switch (letter)
 46e:	fc 01       	movw	r30, r24
 470:	ff 27       	eor	r31, r31
 472:	e1 56       	subi	r30, 0x61	; 97
 474:	f1 09       	sbc	r31, r1
 476:	ea 31       	cpi	r30, 0x1A	; 26
 478:	f1 05       	cpc	r31, r1
 47a:	08 f0       	brcs	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	a1 c1       	rjmp	.+834    	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
 47e:	ea 5b       	subi	r30, 0xBA	; 186
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	23 c2       	rjmp	.+1094   	; 0x8ca <__tablejump2__>
		{
			case 'a':
			memcpy(text + offset, A, sizeof(A));
 484:	d8 01       	movw	r26, r16
 486:	aa 0f       	add	r26, r26
 488:	bb 1f       	adc	r27, r27
 48a:	aa 0d       	add	r26, r10
 48c:	bb 1d       	adc	r27, r11
 48e:	8a e0       	ldi	r24, 0x0A	; 10
 490:	fe 01       	movw	r30, r28
 492:	be 96       	adiw	r30, 0x2e	; 46
 494:	01 90       	ld	r0, Z+
 496:	0d 92       	st	X+, r0
 498:	8a 95       	dec	r24
 49a:	e1 f7       	brne	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			offset += sizeof(A) / 2;
 49c:	c8 01       	movw	r24, r16
 49e:	05 96       	adiw	r24, 0x05	; 5
			break;
 4a0:	9b c1       	rjmp	.+822    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'b':
			memcpy(text + offset, B, sizeof(B));
 4a2:	d8 01       	movw	r26, r16
 4a4:	aa 0f       	add	r26, r26
 4a6:	bb 1f       	adc	r27, r27
 4a8:	aa 0d       	add	r26, r10
 4aa:	bb 1d       	adc	r27, r11
 4ac:	8a e0       	ldi	r24, 0x0A	; 10
 4ae:	fe 01       	movw	r30, r28
 4b0:	f8 96       	adiw	r30, 0x38	; 56
 4b2:	01 90       	ld	r0, Z+
 4b4:	0d 92       	st	X+, r0
 4b6:	8a 95       	dec	r24
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
			offset += sizeof(B) / 2;
 4ba:	c8 01       	movw	r24, r16
 4bc:	05 96       	adiw	r24, 0x05	; 5
			break;
 4be:	8c c1       	rjmp	.+792    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'c':
			memcpy(text + offset, C, sizeof(C));
 4c0:	d8 01       	movw	r26, r16
 4c2:	aa 0f       	add	r26, r26
 4c4:	bb 1f       	adc	r27, r27
 4c6:	aa 0d       	add	r26, r10
 4c8:	bb 1d       	adc	r27, r11
 4ca:	8a e0       	ldi	r24, 0x0A	; 10
 4cc:	fe 01       	movw	r30, r28
 4ce:	ee 5b       	subi	r30, 0xBE	; 190
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	01 90       	ld	r0, Z+
 4d4:	0d 92       	st	X+, r0
 4d6:	8a 95       	dec	r24
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			offset += sizeof(C) / 2;
 4da:	c8 01       	movw	r24, r16
 4dc:	05 96       	adiw	r24, 0x05	; 5
			break;
 4de:	7c c1       	rjmp	.+760    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'd':
			memcpy(text + offset, D, sizeof(D));
 4e0:	d8 01       	movw	r26, r16
 4e2:	aa 0f       	add	r26, r26
 4e4:	bb 1f       	adc	r27, r27
 4e6:	aa 0d       	add	r26, r10
 4e8:	bb 1d       	adc	r27, r11
 4ea:	8a e0       	ldi	r24, 0x0A	; 10
 4ec:	fe 01       	movw	r30, r28
 4ee:	e4 5b       	subi	r30, 0xB4	; 180
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	01 90       	ld	r0, Z+
 4f4:	0d 92       	st	X+, r0
 4f6:	8a 95       	dec	r24
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			offset += sizeof(D) / 2;
 4fa:	c8 01       	movw	r24, r16
 4fc:	05 96       	adiw	r24, 0x05	; 5
			break;
 4fe:	6c c1       	rjmp	.+728    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'e':
			memcpy(text + offset, E, sizeof(E));
 500:	d8 01       	movw	r26, r16
 502:	aa 0f       	add	r26, r26
 504:	bb 1f       	adc	r27, r27
 506:	aa 0d       	add	r26, r10
 508:	bb 1d       	adc	r27, r11
 50a:	8a e0       	ldi	r24, 0x0A	; 10
 50c:	fe 01       	movw	r30, r28
 50e:	ea 5a       	subi	r30, 0xAA	; 170
 510:	ff 4f       	sbci	r31, 0xFF	; 255
 512:	01 90       	ld	r0, Z+
 514:	0d 92       	st	X+, r0
 516:	8a 95       	dec	r24
 518:	e1 f7       	brne	.-8      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
			offset += sizeof(E) / 2;
 51a:	c8 01       	movw	r24, r16
 51c:	05 96       	adiw	r24, 0x05	; 5
			break;
 51e:	5c c1       	rjmp	.+696    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'f':
			memcpy(text + offset, F, sizeof(F));
 520:	d8 01       	movw	r26, r16
 522:	aa 0f       	add	r26, r26
 524:	bb 1f       	adc	r27, r27
 526:	aa 0d       	add	r26, r10
 528:	bb 1d       	adc	r27, r11
 52a:	8a e0       	ldi	r24, 0x0A	; 10
 52c:	fe 01       	movw	r30, r28
 52e:	e0 5a       	subi	r30, 0xA0	; 160
 530:	ff 4f       	sbci	r31, 0xFF	; 255
 532:	01 90       	ld	r0, Z+
 534:	0d 92       	st	X+, r0
 536:	8a 95       	dec	r24
 538:	e1 f7       	brne	.-8      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			offset += sizeof(F) / 2;
 53a:	c8 01       	movw	r24, r16
 53c:	05 96       	adiw	r24, 0x05	; 5
			break;
 53e:	4c c1       	rjmp	.+664    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'g':
			memcpy(text + offset, G, sizeof(G));
 540:	d8 01       	movw	r26, r16
 542:	aa 0f       	add	r26, r26
 544:	bb 1f       	adc	r27, r27
 546:	aa 0d       	add	r26, r10
 548:	bb 1d       	adc	r27, r11
 54a:	8a e0       	ldi	r24, 0x0A	; 10
 54c:	fe 01       	movw	r30, r28
 54e:	e6 59       	subi	r30, 0x96	; 150
 550:	ff 4f       	sbci	r31, 0xFF	; 255
 552:	01 90       	ld	r0, Z+
 554:	0d 92       	st	X+, r0
 556:	8a 95       	dec	r24
 558:	e1 f7       	brne	.-8      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
			offset += sizeof(G) / 2;
 55a:	c8 01       	movw	r24, r16
 55c:	05 96       	adiw	r24, 0x05	; 5
			break;
 55e:	3c c1       	rjmp	.+632    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'h':
			memcpy(text + offset, H, sizeof(H));
 560:	d8 01       	movw	r26, r16
 562:	aa 0f       	add	r26, r26
 564:	bb 1f       	adc	r27, r27
 566:	aa 0d       	add	r26, r10
 568:	bb 1d       	adc	r27, r11
 56a:	8a e0       	ldi	r24, 0x0A	; 10
 56c:	fe 01       	movw	r30, r28
 56e:	ec 58       	subi	r30, 0x8C	; 140
 570:	ff 4f       	sbci	r31, 0xFF	; 255
 572:	01 90       	ld	r0, Z+
 574:	0d 92       	st	X+, r0
 576:	8a 95       	dec	r24
 578:	e1 f7       	brne	.-8      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
			offset += sizeof(H) / 2;
 57a:	c8 01       	movw	r24, r16
 57c:	05 96       	adiw	r24, 0x05	; 5
			break;
 57e:	2c c1       	rjmp	.+600    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'i':
			memcpy(text + offset, I, sizeof(I));
 580:	d8 01       	movw	r26, r16
 582:	aa 0f       	add	r26, r26
 584:	bb 1f       	adc	r27, r27
 586:	aa 0d       	add	r26, r10
 588:	bb 1d       	adc	r27, r11
 58a:	8a e0       	ldi	r24, 0x0A	; 10
 58c:	fe 01       	movw	r30, r28
 58e:	e2 58       	subi	r30, 0x82	; 130
 590:	ff 4f       	sbci	r31, 0xFF	; 255
 592:	01 90       	ld	r0, Z+
 594:	0d 92       	st	X+, r0
 596:	8a 95       	dec	r24
 598:	e1 f7       	brne	.-8      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			offset += sizeof(I) / 2;
 59a:	c8 01       	movw	r24, r16
 59c:	05 96       	adiw	r24, 0x05	; 5
			break;
 59e:	1c c1       	rjmp	.+568    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'j':
			memcpy(text + offset, J, sizeof(J));
 5a0:	d8 01       	movw	r26, r16
 5a2:	aa 0f       	add	r26, r26
 5a4:	bb 1f       	adc	r27, r27
 5a6:	aa 0d       	add	r26, r10
 5a8:	bb 1d       	adc	r27, r11
 5aa:	88 e0       	ldi	r24, 0x08	; 8
 5ac:	fe 01       	movw	r30, r28
 5ae:	e8 57       	subi	r30, 0x78	; 120
 5b0:	ff 4f       	sbci	r31, 0xFF	; 255
 5b2:	01 90       	ld	r0, Z+
 5b4:	0d 92       	st	X+, r0
 5b6:	8a 95       	dec	r24
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			offset += sizeof(J) / 2;
 5ba:	c8 01       	movw	r24, r16
 5bc:	04 96       	adiw	r24, 0x04	; 4
			break;
 5be:	0c c1       	rjmp	.+536    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'k':
			memcpy(text + offset, K, sizeof(K));
 5c0:	d8 01       	movw	r26, r16
 5c2:	aa 0f       	add	r26, r26
 5c4:	bb 1f       	adc	r27, r27
 5c6:	aa 0d       	add	r26, r10
 5c8:	bb 1d       	adc	r27, r11
 5ca:	88 e0       	ldi	r24, 0x08	; 8
 5cc:	fe 01       	movw	r30, r28
 5ce:	e0 57       	subi	r30, 0x70	; 112
 5d0:	ff 4f       	sbci	r31, 0xFF	; 255
 5d2:	01 90       	ld	r0, Z+
 5d4:	0d 92       	st	X+, r0
 5d6:	8a 95       	dec	r24
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
			offset += sizeof(K) / 2;
 5da:	c8 01       	movw	r24, r16
 5dc:	04 96       	adiw	r24, 0x04	; 4
			break;
 5de:	fc c0       	rjmp	.+504    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'l':
			memcpy(text + offset, L, sizeof(L));
 5e0:	d8 01       	movw	r26, r16
 5e2:	aa 0f       	add	r26, r26
 5e4:	bb 1f       	adc	r27, r27
 5e6:	aa 0d       	add	r26, r10
 5e8:	bb 1d       	adc	r27, r11
 5ea:	88 e0       	ldi	r24, 0x08	; 8
 5ec:	fe 01       	movw	r30, r28
 5ee:	e8 56       	subi	r30, 0x68	; 104
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	01 90       	ld	r0, Z+
 5f4:	0d 92       	st	X+, r0
 5f6:	8a 95       	dec	r24
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
			offset += sizeof(L) / 2;
 5fa:	c8 01       	movw	r24, r16
 5fc:	04 96       	adiw	r24, 0x04	; 4
			break;
 5fe:	ec c0       	rjmp	.+472    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'm':
			memcpy(text + offset, M, sizeof(M));
 600:	d8 01       	movw	r26, r16
 602:	aa 0f       	add	r26, r26
 604:	bb 1f       	adc	r27, r27
 606:	aa 0d       	add	r26, r10
 608:	bb 1d       	adc	r27, r11
 60a:	8a e0       	ldi	r24, 0x0A	; 10
 60c:	fe 01       	movw	r30, r28
 60e:	e0 56       	subi	r30, 0x60	; 96
 610:	ff 4f       	sbci	r31, 0xFF	; 255
 612:	01 90       	ld	r0, Z+
 614:	0d 92       	st	X+, r0
 616:	8a 95       	dec	r24
 618:	e1 f7       	brne	.-8      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
			offset += sizeof(M) / 2;
 61a:	c8 01       	movw	r24, r16
 61c:	05 96       	adiw	r24, 0x05	; 5
			break;
 61e:	dc c0       	rjmp	.+440    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'n':
			memcpy(text + offset, N, sizeof(N));
 620:	d8 01       	movw	r26, r16
 622:	aa 0f       	add	r26, r26
 624:	bb 1f       	adc	r27, r27
 626:	aa 0d       	add	r26, r10
 628:	bb 1d       	adc	r27, r11
 62a:	8a e0       	ldi	r24, 0x0A	; 10
 62c:	fe 01       	movw	r30, r28
 62e:	e6 55       	subi	r30, 0x56	; 86
 630:	ff 4f       	sbci	r31, 0xFF	; 255
 632:	01 90       	ld	r0, Z+
 634:	0d 92       	st	X+, r0
 636:	8a 95       	dec	r24
 638:	e1 f7       	brne	.-8      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
			offset += sizeof(N) / 2;
 63a:	c8 01       	movw	r24, r16
 63c:	05 96       	adiw	r24, 0x05	; 5
			break;
 63e:	cc c0       	rjmp	.+408    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'o':
			memcpy(text + offset, O, sizeof(O));
 640:	d8 01       	movw	r26, r16
 642:	aa 0f       	add	r26, r26
 644:	bb 1f       	adc	r27, r27
 646:	aa 0d       	add	r26, r10
 648:	bb 1d       	adc	r27, r11
 64a:	8a e0       	ldi	r24, 0x0A	; 10
 64c:	fe 01       	movw	r30, r28
 64e:	ec 54       	subi	r30, 0x4C	; 76
 650:	ff 4f       	sbci	r31, 0xFF	; 255
 652:	01 90       	ld	r0, Z+
 654:	0d 92       	st	X+, r0
 656:	8a 95       	dec	r24
 658:	e1 f7       	brne	.-8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
			offset += sizeof(O) / 2;
 65a:	c8 01       	movw	r24, r16
 65c:	05 96       	adiw	r24, 0x05	; 5
			break;
 65e:	bc c0       	rjmp	.+376    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'p':
			memcpy(text + offset, P, sizeof(P));
 660:	d8 01       	movw	r26, r16
 662:	aa 0f       	add	r26, r26
 664:	bb 1f       	adc	r27, r27
 666:	aa 0d       	add	r26, r10
 668:	bb 1d       	adc	r27, r11
 66a:	8a e0       	ldi	r24, 0x0A	; 10
 66c:	fe 01       	movw	r30, r28
 66e:	e2 54       	subi	r30, 0x42	; 66
 670:	ff 4f       	sbci	r31, 0xFF	; 255
 672:	01 90       	ld	r0, Z+
 674:	0d 92       	st	X+, r0
 676:	8a 95       	dec	r24
 678:	e1 f7       	brne	.-8      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
			offset += sizeof(P) / 2;
 67a:	c8 01       	movw	r24, r16
 67c:	05 96       	adiw	r24, 0x05	; 5
			break;
 67e:	ac c0       	rjmp	.+344    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'q':
			memcpy(text + offset, Q, sizeof(Q));
 680:	d8 01       	movw	r26, r16
 682:	aa 0f       	add	r26, r26
 684:	bb 1f       	adc	r27, r27
 686:	aa 0d       	add	r26, r10
 688:	bb 1d       	adc	r27, r11
 68a:	8a e0       	ldi	r24, 0x0A	; 10
 68c:	fe 01       	movw	r30, r28
 68e:	e8 53       	subi	r30, 0x38	; 56
 690:	ff 4f       	sbci	r31, 0xFF	; 255
 692:	01 90       	ld	r0, Z+
 694:	0d 92       	st	X+, r0
 696:	8a 95       	dec	r24
 698:	e1 f7       	brne	.-8      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
			offset += sizeof(Q) / 2;
 69a:	c8 01       	movw	r24, r16
 69c:	05 96       	adiw	r24, 0x05	; 5
			break;
 69e:	9c c0       	rjmp	.+312    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'r':
			memcpy(text + offset, R, sizeof(R));
 6a0:	d8 01       	movw	r26, r16
 6a2:	aa 0f       	add	r26, r26
 6a4:	bb 1f       	adc	r27, r27
 6a6:	aa 0d       	add	r26, r10
 6a8:	bb 1d       	adc	r27, r11
 6aa:	8a e0       	ldi	r24, 0x0A	; 10
 6ac:	fe 01       	movw	r30, r28
 6ae:	ee 52       	subi	r30, 0x2E	; 46
 6b0:	ff 4f       	sbci	r31, 0xFF	; 255
 6b2:	01 90       	ld	r0, Z+
 6b4:	0d 92       	st	X+, r0
 6b6:	8a 95       	dec	r24
 6b8:	e1 f7       	brne	.-8      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
			offset += sizeof(R) / 2;
 6ba:	c8 01       	movw	r24, r16
 6bc:	05 96       	adiw	r24, 0x05	; 5
			break;
 6be:	8c c0       	rjmp	.+280    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 's':
			memcpy(text + offset, S, sizeof(S));
 6c0:	d8 01       	movw	r26, r16
 6c2:	aa 0f       	add	r26, r26
 6c4:	bb 1f       	adc	r27, r27
 6c6:	aa 0d       	add	r26, r10
 6c8:	bb 1d       	adc	r27, r11
 6ca:	8a e0       	ldi	r24, 0x0A	; 10
 6cc:	fe 01       	movw	r30, r28
 6ce:	e4 52       	subi	r30, 0x24	; 36
 6d0:	ff 4f       	sbci	r31, 0xFF	; 255
 6d2:	01 90       	ld	r0, Z+
 6d4:	0d 92       	st	X+, r0
 6d6:	8a 95       	dec	r24
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
			offset += sizeof(S) / 2;
 6da:	c8 01       	movw	r24, r16
 6dc:	05 96       	adiw	r24, 0x05	; 5
			break;
 6de:	7c c0       	rjmp	.+248    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 't':
			memcpy(text + offset, T, sizeof(T));
 6e0:	d8 01       	movw	r26, r16
 6e2:	aa 0f       	add	r26, r26
 6e4:	bb 1f       	adc	r27, r27
 6e6:	aa 0d       	add	r26, r10
 6e8:	bb 1d       	adc	r27, r11
 6ea:	8a e0       	ldi	r24, 0x0A	; 10
 6ec:	fe 01       	movw	r30, r28
 6ee:	ea 51       	subi	r30, 0x1A	; 26
 6f0:	ff 4f       	sbci	r31, 0xFF	; 255
 6f2:	01 90       	ld	r0, Z+
 6f4:	0d 92       	st	X+, r0
 6f6:	8a 95       	dec	r24
 6f8:	e1 f7       	brne	.-8      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
			offset += sizeof(T) / 2;
 6fa:	c8 01       	movw	r24, r16
 6fc:	05 96       	adiw	r24, 0x05	; 5
			break;
 6fe:	6c c0       	rjmp	.+216    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'u':
			memcpy(text + offset, U, sizeof(U));
 700:	d8 01       	movw	r26, r16
 702:	aa 0f       	add	r26, r26
 704:	bb 1f       	adc	r27, r27
 706:	aa 0d       	add	r26, r10
 708:	bb 1d       	adc	r27, r11
 70a:	8a e0       	ldi	r24, 0x0A	; 10
 70c:	fe 01       	movw	r30, r28
 70e:	e0 51       	subi	r30, 0x10	; 16
 710:	ff 4f       	sbci	r31, 0xFF	; 255
 712:	01 90       	ld	r0, Z+
 714:	0d 92       	st	X+, r0
 716:	8a 95       	dec	r24
 718:	e1 f7       	brne	.-8      	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
			offset += sizeof(U) / 2;
 71a:	c8 01       	movw	r24, r16
 71c:	05 96       	adiw	r24, 0x05	; 5
			break;
 71e:	5c c0       	rjmp	.+184    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'v':
			memcpy(text + offset, V, sizeof(V));
 720:	d8 01       	movw	r26, r16
 722:	aa 0f       	add	r26, r26
 724:	bb 1f       	adc	r27, r27
 726:	aa 0d       	add	r26, r10
 728:	bb 1d       	adc	r27, r11
 72a:	8a e0       	ldi	r24, 0x0A	; 10
 72c:	fe 01       	movw	r30, r28
 72e:	e6 50       	subi	r30, 0x06	; 6
 730:	ff 4f       	sbci	r31, 0xFF	; 255
 732:	01 90       	ld	r0, Z+
 734:	0d 92       	st	X+, r0
 736:	8a 95       	dec	r24
 738:	e1 f7       	brne	.-8      	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
			offset += sizeof(V) / 2;
 73a:	c8 01       	movw	r24, r16
 73c:	05 96       	adiw	r24, 0x05	; 5
			break;
 73e:	4c c0       	rjmp	.+152    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'w':
			memcpy(text + offset, W, sizeof(W));
 740:	d8 01       	movw	r26, r16
 742:	aa 0f       	add	r26, r26
 744:	bb 1f       	adc	r27, r27
 746:	aa 0d       	add	r26, r10
 748:	bb 1d       	adc	r27, r11
 74a:	8a e0       	ldi	r24, 0x0A	; 10
 74c:	fe 01       	movw	r30, r28
 74e:	ec 5f       	subi	r30, 0xFC	; 252
 750:	fe 4f       	sbci	r31, 0xFE	; 254
 752:	01 90       	ld	r0, Z+
 754:	0d 92       	st	X+, r0
 756:	8a 95       	dec	r24
 758:	e1 f7       	brne	.-8      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
			offset += sizeof(W) / 2;
 75a:	c8 01       	movw	r24, r16
 75c:	05 96       	adiw	r24, 0x05	; 5
			break;
 75e:	3c c0       	rjmp	.+120    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'x':
			memcpy(text + offset, X, sizeof(X));
 760:	d8 01       	movw	r26, r16
 762:	aa 0f       	add	r26, r26
 764:	bb 1f       	adc	r27, r27
 766:	aa 0d       	add	r26, r10
 768:	bb 1d       	adc	r27, r11
 76a:	8a e0       	ldi	r24, 0x0A	; 10
 76c:	fe 01       	movw	r30, r28
 76e:	e2 5f       	subi	r30, 0xF2	; 242
 770:	fe 4f       	sbci	r31, 0xFE	; 254
 772:	01 90       	ld	r0, Z+
 774:	0d 92       	st	X+, r0
 776:	8a 95       	dec	r24
 778:	e1 f7       	brne	.-8      	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
			offset += sizeof(X) / 2;
 77a:	c8 01       	movw	r24, r16
 77c:	05 96       	adiw	r24, 0x05	; 5
			break;
 77e:	2c c0       	rjmp	.+88     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'y':
			memcpy(text + offset, Y, sizeof(Y));
 780:	d8 01       	movw	r26, r16
 782:	aa 0f       	add	r26, r26
 784:	bb 1f       	adc	r27, r27
 786:	aa 0d       	add	r26, r10
 788:	bb 1d       	adc	r27, r11
 78a:	8a e0       	ldi	r24, 0x0A	; 10
 78c:	fe 01       	movw	r30, r28
 78e:	e8 5e       	subi	r30, 0xE8	; 232
 790:	fe 4f       	sbci	r31, 0xFE	; 254
 792:	01 90       	ld	r0, Z+
 794:	0d 92       	st	X+, r0
 796:	8a 95       	dec	r24
 798:	e1 f7       	brne	.-8      	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
			offset += sizeof(Y) / 2;
 79a:	c8 01       	movw	r24, r16
 79c:	05 96       	adiw	r24, 0x05	; 5
			break;
 79e:	1c c0       	rjmp	.+56     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			case 'z':
			memcpy(text + offset, Z, sizeof(Z));
 7a0:	d8 01       	movw	r26, r16
 7a2:	aa 0f       	add	r26, r26
 7a4:	bb 1f       	adc	r27, r27
 7a6:	aa 0d       	add	r26, r10
 7a8:	bb 1d       	adc	r27, r11
 7aa:	8c e0       	ldi	r24, 0x0C	; 12
 7ac:	fe 01       	movw	r30, r28
 7ae:	ee 5d       	subi	r30, 0xDE	; 222
 7b0:	fe 4f       	sbci	r31, 0xFE	; 254
 7b2:	01 90       	ld	r0, Z+
 7b4:	0d 92       	st	X+, r0
 7b6:	8a 95       	dec	r24
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
			offset += sizeof(Z) / 2;
 7ba:	c8 01       	movw	r24, r16
 7bc:	06 96       	adiw	r24, 0x06	; 6
			break;
 7be:	0c c0       	rjmp	.+24     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			default:
			memcpy(text + offset, 0x00, sizeof(int));
 7c0:	f8 01       	movw	r30, r16
 7c2:	ee 0f       	add	r30, r30
 7c4:	ff 1f       	adc	r31, r31
 7c6:	ea 0d       	add	r30, r10
 7c8:	fb 1d       	adc	r31, r11
 7ca:	d4 01       	movw	r26, r8
 7cc:	8d 91       	ld	r24, X+
 7ce:	9c 91       	ld	r25, X
 7d0:	91 83       	std	Z+1, r25	; 0x01
 7d2:	80 83       	st	Z, r24
			offset++;
 7d4:	c8 01       	movw	r24, r16
 7d6:	01 96       	adiw	r24, 0x01	; 1
			break;
			
		}
		text[offset] = 0x00;
 7d8:	fc 01       	movw	r30, r24
 7da:	ee 0f       	add	r30, r30
 7dc:	ff 1f       	adc	r31, r31
 7de:	ea 0d       	add	r30, r10
 7e0:	fb 1d       	adc	r31, r11
 7e2:	11 82       	std	Z+1, r1	; 0x01
 7e4:	10 82       	st	Z, r1
		offset++;
 7e6:	8c 01       	movw	r16, r24
 7e8:	0f 5f       	subi	r16, 0xFF	; 255
 7ea:	1f 4f       	sbci	r17, 0xFF	; 255
	int X[5] = {0x11, 0x0a, 0x04, 0x0a, 0x11};
	int Y[5] = {0x22, 0x14, 0x08, 0x04, 0x02};
	int Z[6] = {0x41, 0x61, 0x51, 0x49, 0x45, 0x43};
	
	int i;
	for(i = 0; i < length; i++){
 7ec:	ce 14       	cp	r12, r14
 7ee:	df 04       	cpc	r13, r15
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
 7f2:	38 ce       	rjmp	.-912    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		text[offset] = 0x00;
		offset++;
	}
	
	int tempoffset = offset;
	for(offset; offset < tempoffset + 8; offset++){
 7f4:	09 96       	adiw	r24, 0x09	; 9
 7f6:	08 17       	cp	r16, r24
 7f8:	19 07       	cpc	r17, r25
 7fa:	ac f4       	brge	.+42     	; 0x826 <__LOCK_REGION_LENGTH__+0x426>
 7fc:	04 c0       	rjmp	.+8      	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
 7fe:	80 e1       	ldi	r24, 0x10	; 16
 800:	90 e0       	ldi	r25, 0x00	; 0
	int *text = malloc(100 * sizeof(int));
	char data[] = "The quick brown fox jumped over the lazy dog";
	int length = strlen(data);
	
	int offset;
	for(offset = 0; offset < 8; offset++){
 802:	08 e0       	ldi	r16, 0x08	; 8
 804:	10 e0       	ldi	r17, 0x00	; 0
 806:	00 0f       	add	r16, r16
 808:	11 1f       	adc	r17, r17
 80a:	f5 01       	movw	r30, r10
 80c:	e0 0f       	add	r30, r16
 80e:	f1 1f       	adc	r31, r17
 810:	00 5f       	subi	r16, 0xF0	; 240
 812:	1f 4f       	sbci	r17, 0xFF	; 255
 814:	95 01       	movw	r18, r10
 816:	20 0f       	add	r18, r16
 818:	31 1f       	adc	r19, r17
		offset++;
	}
	
	int tempoffset = offset;
	for(offset; offset < tempoffset + 8; offset++){
		text[offset] = 0x00;
 81a:	11 92       	st	Z+, r1
 81c:	11 92       	st	Z+, r1
		text[offset] = 0x00;
		offset++;
	}
	
	int tempoffset = offset;
	for(offset; offset < tempoffset + 8; offset++){
 81e:	2e 17       	cp	r18, r30
 820:	3f 07       	cpc	r19, r31
 822:	d9 f7       	brne	.-10     	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
 824:	01 c0       	rjmp	.+2      	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
			offset++;
			break;
			
		}
		text[offset] = 0x00;
		offset++;
 826:	c8 01       	movw	r24, r16
		wait(750);			 
		if(x<offset-8){
			x++;
		}
		else{
			x = 0;
 828:	e1 2c       	mov	r14, r1
 82a:	f1 2c       	mov	r15, r1
		writeData(6,	text[x+4]);
		writeData(4,	text[x+5]);
		writeData(2,	text[x+6]);
		writeData(0,	text[x+7]);
		wait(750);			 
		if(x<offset-8){
 82c:	6c 01       	movw	r12, r24
 82e:	b8 e0       	ldi	r27, 0x08	; 8
 830:	cb 1a       	sub	r12, r27
 832:	d1 08       	sbc	r13, r1
 834:	02 c0       	rjmp	.+4      	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
			x++;
		}
		else{
			x = 0;
 836:	e1 2c       	mov	r14, r1
 838:	f1 2c       	mov	r15, r1
		text[offset] = 0x00;
	}
	
	int x = 0;
	while(1){
		writeData(14,	text[x]);
 83a:	87 01       	movw	r16, r14
 83c:	00 0f       	add	r16, r16
 83e:	11 1f       	adc	r17, r17
 840:	0a 0d       	add	r16, r10
 842:	1b 1d       	adc	r17, r11
 844:	f8 01       	movw	r30, r16
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	8e e0       	ldi	r24, 0x0E	; 14
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	a2 dc       	rcall	.-1724   	; 0x194 <writeData>
		writeData(12,	text[x+1]);
 850:	d8 01       	movw	r26, r16
 852:	12 96       	adiw	r26, 0x02	; 2
 854:	6d 91       	ld	r22, X+
 856:	7c 91       	ld	r23, X
 858:	13 97       	sbiw	r26, 0x03	; 3
 85a:	8c e0       	ldi	r24, 0x0C	; 12
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	9a dc       	rcall	.-1740   	; 0x194 <writeData>
		writeData(10,	text[x+2]);
 860:	f8 01       	movw	r30, r16
 862:	64 81       	ldd	r22, Z+4	; 0x04
 864:	75 81       	ldd	r23, Z+5	; 0x05
 866:	8a e0       	ldi	r24, 0x0A	; 10
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	94 dc       	rcall	.-1752   	; 0x194 <writeData>
		writeData(8,	text[x+3]);
 86c:	d8 01       	movw	r26, r16
 86e:	16 96       	adiw	r26, 0x06	; 6
 870:	6d 91       	ld	r22, X+
 872:	7c 91       	ld	r23, X
 874:	17 97       	sbiw	r26, 0x07	; 7
 876:	88 e0       	ldi	r24, 0x08	; 8
 878:	90 e0       	ldi	r25, 0x00	; 0
		writeData(6,	text[x+4]);
 87a:	8c dc       	rcall	.-1768   	; 0x194 <writeData>
 87c:	f8 01       	movw	r30, r16
 87e:	60 85       	ldd	r22, Z+8	; 0x08
 880:	71 85       	ldd	r23, Z+9	; 0x09
 882:	86 e0       	ldi	r24, 0x06	; 6
 884:	90 e0       	ldi	r25, 0x00	; 0
		writeData(4,	text[x+5]);
 886:	86 dc       	rcall	.-1780   	; 0x194 <writeData>
 888:	d8 01       	movw	r26, r16
 88a:	1a 96       	adiw	r26, 0x0a	; 10
 88c:	6d 91       	ld	r22, X+
 88e:	7c 91       	ld	r23, X
 890:	1b 97       	sbiw	r26, 0x0b	; 11
 892:	84 e0       	ldi	r24, 0x04	; 4
 894:	90 e0       	ldi	r25, 0x00	; 0
		writeData(2,	text[x+6]);
 896:	7e dc       	rcall	.-1796   	; 0x194 <writeData>
 898:	f8 01       	movw	r30, r16
 89a:	64 85       	ldd	r22, Z+12	; 0x0c
 89c:	75 85       	ldd	r23, Z+13	; 0x0d
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	90 e0       	ldi	r25, 0x00	; 0
		writeData(0,	text[x+7]);
 8a2:	78 dc       	rcall	.-1808   	; 0x194 <writeData>
 8a4:	d8 01       	movw	r26, r16
 8a6:	1e 96       	adiw	r26, 0x0e	; 14
 8a8:	6d 91       	ld	r22, X+
 8aa:	7c 91       	ld	r23, X
 8ac:	1f 97       	sbiw	r26, 0x0f	; 15
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	90 e0       	ldi	r25, 0x00	; 0
		wait(750);			 
 8b2:	70 dc       	rcall	.-1824   	; 0x194 <writeData>
 8b4:	8e ee       	ldi	r24, 0xEE	; 238
 8b6:	92 e0       	ldi	r25, 0x02	; 2
 8b8:	5c dc       	rcall	.-1864   	; 0x172 <wait>
		if(x<offset-8){
 8ba:	ec 14       	cp	r14, r12
 8bc:	fd 04       	cpc	r15, r13
 8be:	0c f0       	brlt	.+2      	; 0x8c2 <__LOCK_REGION_LENGTH__+0x4c2>
 8c0:	ba cf       	rjmp	.-140    	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
			x++;
 8c2:	bf ef       	ldi	r27, 0xFF	; 255
 8c4:	eb 1a       	sub	r14, r27
 8c6:	fb 0a       	sbc	r15, r27
 8c8:	b8 cf       	rjmp	.-144    	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>

000008ca <__tablejump2__>:
 8ca:	ee 0f       	add	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	00 24       	eor	r0, r0
 8d0:	00 1c       	adc	r0, r0
 8d2:	0b be       	out	0x3b, r0	; 59
 8d4:	07 90       	elpm	r0, Z+
 8d6:	f6 91       	elpm	r31, Z
 8d8:	e0 2d       	mov	r30, r0
 8da:	09 94       	ijmp

000008dc <malloc>:
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	82 30       	cpi	r24, 0x02	; 2
 8e6:	91 05       	cpc	r25, r1
 8e8:	10 f4       	brcc	.+4      	; 0x8ee <malloc+0x12>
 8ea:	82 e0       	ldi	r24, 0x02	; 2
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <__flp>
 8f2:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <__flp+0x1>
 8f6:	20 e0       	ldi	r18, 0x00	; 0
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	a0 e0       	ldi	r26, 0x00	; 0
 8fc:	b0 e0       	ldi	r27, 0x00	; 0
 8fe:	30 97       	sbiw	r30, 0x00	; 0
 900:	19 f1       	breq	.+70     	; 0x948 <malloc+0x6c>
 902:	40 81       	ld	r20, Z
 904:	51 81       	ldd	r21, Z+1	; 0x01
 906:	02 81       	ldd	r16, Z+2	; 0x02
 908:	13 81       	ldd	r17, Z+3	; 0x03
 90a:	48 17       	cp	r20, r24
 90c:	59 07       	cpc	r21, r25
 90e:	c8 f0       	brcs	.+50     	; 0x942 <malloc+0x66>
 910:	84 17       	cp	r24, r20
 912:	95 07       	cpc	r25, r21
 914:	69 f4       	brne	.+26     	; 0x930 <malloc+0x54>
 916:	10 97       	sbiw	r26, 0x00	; 0
 918:	31 f0       	breq	.+12     	; 0x926 <malloc+0x4a>
 91a:	12 96       	adiw	r26, 0x02	; 2
 91c:	0c 93       	st	X, r16
 91e:	12 97       	sbiw	r26, 0x02	; 2
 920:	13 96       	adiw	r26, 0x03	; 3
 922:	1c 93       	st	X, r17
 924:	27 c0       	rjmp	.+78     	; 0x974 <malloc+0x98>
 926:	00 93 36 02 	sts	0x0236, r16	; 0x800236 <__flp>
 92a:	10 93 37 02 	sts	0x0237, r17	; 0x800237 <__flp+0x1>
 92e:	22 c0       	rjmp	.+68     	; 0x974 <malloc+0x98>
 930:	21 15       	cp	r18, r1
 932:	31 05       	cpc	r19, r1
 934:	19 f0       	breq	.+6      	; 0x93c <malloc+0x60>
 936:	42 17       	cp	r20, r18
 938:	53 07       	cpc	r21, r19
 93a:	18 f4       	brcc	.+6      	; 0x942 <malloc+0x66>
 93c:	9a 01       	movw	r18, r20
 93e:	bd 01       	movw	r22, r26
 940:	ef 01       	movw	r28, r30
 942:	df 01       	movw	r26, r30
 944:	f8 01       	movw	r30, r16
 946:	db cf       	rjmp	.-74     	; 0x8fe <malloc+0x22>
 948:	21 15       	cp	r18, r1
 94a:	31 05       	cpc	r19, r1
 94c:	f9 f0       	breq	.+62     	; 0x98c <malloc+0xb0>
 94e:	28 1b       	sub	r18, r24
 950:	39 0b       	sbc	r19, r25
 952:	24 30       	cpi	r18, 0x04	; 4
 954:	31 05       	cpc	r19, r1
 956:	80 f4       	brcc	.+32     	; 0x978 <malloc+0x9c>
 958:	8a 81       	ldd	r24, Y+2	; 0x02
 95a:	9b 81       	ldd	r25, Y+3	; 0x03
 95c:	61 15       	cp	r22, r1
 95e:	71 05       	cpc	r23, r1
 960:	21 f0       	breq	.+8      	; 0x96a <malloc+0x8e>
 962:	fb 01       	movw	r30, r22
 964:	93 83       	std	Z+3, r25	; 0x03
 966:	82 83       	std	Z+2, r24	; 0x02
 968:	04 c0       	rjmp	.+8      	; 0x972 <malloc+0x96>
 96a:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <__flp+0x1>
 96e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__flp>
 972:	fe 01       	movw	r30, r28
 974:	32 96       	adiw	r30, 0x02	; 2
 976:	44 c0       	rjmp	.+136    	; 0xa00 <malloc+0x124>
 978:	fe 01       	movw	r30, r28
 97a:	e2 0f       	add	r30, r18
 97c:	f3 1f       	adc	r31, r19
 97e:	81 93       	st	Z+, r24
 980:	91 93       	st	Z+, r25
 982:	22 50       	subi	r18, 0x02	; 2
 984:	31 09       	sbc	r19, r1
 986:	39 83       	std	Y+1, r19	; 0x01
 988:	28 83       	st	Y, r18
 98a:	3a c0       	rjmp	.+116    	; 0xa00 <malloc+0x124>
 98c:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__data_end>
 990:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__data_end+0x1>
 994:	23 2b       	or	r18, r19
 996:	41 f4       	brne	.+16     	; 0x9a8 <malloc+0xcc>
 998:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 99c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 9a0:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <__data_end+0x1>
 9a4:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <__data_end>
 9a8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 9ac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 9b0:	21 15       	cp	r18, r1
 9b2:	31 05       	cpc	r19, r1
 9b4:	41 f4       	brne	.+16     	; 0x9c6 <malloc+0xea>
 9b6:	2d b7       	in	r18, 0x3d	; 61
 9b8:	3e b7       	in	r19, 0x3e	; 62
 9ba:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 9be:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 9c2:	24 1b       	sub	r18, r20
 9c4:	35 0b       	sbc	r19, r21
 9c6:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <__data_end>
 9ca:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <__data_end+0x1>
 9ce:	e2 17       	cp	r30, r18
 9d0:	f3 07       	cpc	r31, r19
 9d2:	a0 f4       	brcc	.+40     	; 0x9fc <malloc+0x120>
 9d4:	2e 1b       	sub	r18, r30
 9d6:	3f 0b       	sbc	r19, r31
 9d8:	28 17       	cp	r18, r24
 9da:	39 07       	cpc	r19, r25
 9dc:	78 f0       	brcs	.+30     	; 0x9fc <malloc+0x120>
 9de:	ac 01       	movw	r20, r24
 9e0:	4e 5f       	subi	r20, 0xFE	; 254
 9e2:	5f 4f       	sbci	r21, 0xFF	; 255
 9e4:	24 17       	cp	r18, r20
 9e6:	35 07       	cpc	r19, r21
 9e8:	48 f0       	brcs	.+18     	; 0x9fc <malloc+0x120>
 9ea:	4e 0f       	add	r20, r30
 9ec:	5f 1f       	adc	r21, r31
 9ee:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <__data_end+0x1>
 9f2:	40 93 34 02 	sts	0x0234, r20	; 0x800234 <__data_end>
 9f6:	81 93       	st	Z+, r24
 9f8:	91 93       	st	Z+, r25
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <malloc+0x124>
 9fc:	e0 e0       	ldi	r30, 0x00	; 0
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	cf 01       	movw	r24, r30
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	1f 91       	pop	r17
 a08:	0f 91       	pop	r16
 a0a:	08 95       	ret

00000a0c <free>:
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	00 97       	sbiw	r24, 0x00	; 0
 a12:	09 f4       	brne	.+2      	; 0xa16 <free+0xa>
 a14:	81 c0       	rjmp	.+258    	; 0xb18 <free+0x10c>
 a16:	fc 01       	movw	r30, r24
 a18:	32 97       	sbiw	r30, 0x02	; 2
 a1a:	13 82       	std	Z+3, r1	; 0x03
 a1c:	12 82       	std	Z+2, r1	; 0x02
 a1e:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <__flp>
 a22:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <__flp+0x1>
 a26:	10 97       	sbiw	r26, 0x00	; 0
 a28:	81 f4       	brne	.+32     	; 0xa4a <free+0x3e>
 a2a:	20 81       	ld	r18, Z
 a2c:	31 81       	ldd	r19, Z+1	; 0x01
 a2e:	82 0f       	add	r24, r18
 a30:	93 1f       	adc	r25, r19
 a32:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__data_end>
 a36:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__data_end+0x1>
 a3a:	28 17       	cp	r18, r24
 a3c:	39 07       	cpc	r19, r25
 a3e:	51 f5       	brne	.+84     	; 0xa94 <free+0x88>
 a40:	f0 93 35 02 	sts	0x0235, r31	; 0x800235 <__data_end+0x1>
 a44:	e0 93 34 02 	sts	0x0234, r30	; 0x800234 <__data_end>
 a48:	67 c0       	rjmp	.+206    	; 0xb18 <free+0x10c>
 a4a:	ed 01       	movw	r28, r26
 a4c:	20 e0       	ldi	r18, 0x00	; 0
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	ce 17       	cp	r28, r30
 a52:	df 07       	cpc	r29, r31
 a54:	40 f4       	brcc	.+16     	; 0xa66 <free+0x5a>
 a56:	4a 81       	ldd	r20, Y+2	; 0x02
 a58:	5b 81       	ldd	r21, Y+3	; 0x03
 a5a:	9e 01       	movw	r18, r28
 a5c:	41 15       	cp	r20, r1
 a5e:	51 05       	cpc	r21, r1
 a60:	f1 f0       	breq	.+60     	; 0xa9e <free+0x92>
 a62:	ea 01       	movw	r28, r20
 a64:	f5 cf       	rjmp	.-22     	; 0xa50 <free+0x44>
 a66:	d3 83       	std	Z+3, r29	; 0x03
 a68:	c2 83       	std	Z+2, r28	; 0x02
 a6a:	40 81       	ld	r20, Z
 a6c:	51 81       	ldd	r21, Z+1	; 0x01
 a6e:	84 0f       	add	r24, r20
 a70:	95 1f       	adc	r25, r21
 a72:	c8 17       	cp	r28, r24
 a74:	d9 07       	cpc	r29, r25
 a76:	59 f4       	brne	.+22     	; 0xa8e <free+0x82>
 a78:	88 81       	ld	r24, Y
 a7a:	99 81       	ldd	r25, Y+1	; 0x01
 a7c:	84 0f       	add	r24, r20
 a7e:	95 1f       	adc	r25, r21
 a80:	02 96       	adiw	r24, 0x02	; 2
 a82:	91 83       	std	Z+1, r25	; 0x01
 a84:	80 83       	st	Z, r24
 a86:	8a 81       	ldd	r24, Y+2	; 0x02
 a88:	9b 81       	ldd	r25, Y+3	; 0x03
 a8a:	93 83       	std	Z+3, r25	; 0x03
 a8c:	82 83       	std	Z+2, r24	; 0x02
 a8e:	21 15       	cp	r18, r1
 a90:	31 05       	cpc	r19, r1
 a92:	29 f4       	brne	.+10     	; 0xa9e <free+0x92>
 a94:	f0 93 37 02 	sts	0x0237, r31	; 0x800237 <__flp+0x1>
 a98:	e0 93 36 02 	sts	0x0236, r30	; 0x800236 <__flp>
 a9c:	3d c0       	rjmp	.+122    	; 0xb18 <free+0x10c>
 a9e:	e9 01       	movw	r28, r18
 aa0:	fb 83       	std	Y+3, r31	; 0x03
 aa2:	ea 83       	std	Y+2, r30	; 0x02
 aa4:	49 91       	ld	r20, Y+
 aa6:	59 91       	ld	r21, Y+
 aa8:	c4 0f       	add	r28, r20
 aaa:	d5 1f       	adc	r29, r21
 aac:	ec 17       	cp	r30, r28
 aae:	fd 07       	cpc	r31, r29
 ab0:	61 f4       	brne	.+24     	; 0xaca <free+0xbe>
 ab2:	80 81       	ld	r24, Z
 ab4:	91 81       	ldd	r25, Z+1	; 0x01
 ab6:	84 0f       	add	r24, r20
 ab8:	95 1f       	adc	r25, r21
 aba:	02 96       	adiw	r24, 0x02	; 2
 abc:	e9 01       	movw	r28, r18
 abe:	99 83       	std	Y+1, r25	; 0x01
 ac0:	88 83       	st	Y, r24
 ac2:	82 81       	ldd	r24, Z+2	; 0x02
 ac4:	93 81       	ldd	r25, Z+3	; 0x03
 ac6:	9b 83       	std	Y+3, r25	; 0x03
 ac8:	8a 83       	std	Y+2, r24	; 0x02
 aca:	e0 e0       	ldi	r30, 0x00	; 0
 acc:	f0 e0       	ldi	r31, 0x00	; 0
 ace:	12 96       	adiw	r26, 0x02	; 2
 ad0:	8d 91       	ld	r24, X+
 ad2:	9c 91       	ld	r25, X
 ad4:	13 97       	sbiw	r26, 0x03	; 3
 ad6:	00 97       	sbiw	r24, 0x00	; 0
 ad8:	19 f0       	breq	.+6      	; 0xae0 <free+0xd4>
 ada:	fd 01       	movw	r30, r26
 adc:	dc 01       	movw	r26, r24
 ade:	f7 cf       	rjmp	.-18     	; 0xace <free+0xc2>
 ae0:	8d 91       	ld	r24, X+
 ae2:	9c 91       	ld	r25, X
 ae4:	11 97       	sbiw	r26, 0x01	; 1
 ae6:	9d 01       	movw	r18, r26
 ae8:	2e 5f       	subi	r18, 0xFE	; 254
 aea:	3f 4f       	sbci	r19, 0xFF	; 255
 aec:	82 0f       	add	r24, r18
 aee:	93 1f       	adc	r25, r19
 af0:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__data_end>
 af4:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__data_end+0x1>
 af8:	28 17       	cp	r18, r24
 afa:	39 07       	cpc	r19, r25
 afc:	69 f4       	brne	.+26     	; 0xb18 <free+0x10c>
 afe:	30 97       	sbiw	r30, 0x00	; 0
 b00:	29 f4       	brne	.+10     	; 0xb0c <free+0x100>
 b02:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <__flp+0x1>
 b06:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <__flp>
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <free+0x104>
 b0c:	13 82       	std	Z+3, r1	; 0x03
 b0e:	12 82       	std	Z+2, r1	; 0x02
 b10:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <__data_end+0x1>
 b14:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <__data_end>
 b18:	df 91       	pop	r29
 b1a:	cf 91       	pop	r28
 b1c:	08 95       	ret

00000b1e <tolower>:
 b1e:	91 11       	cpse	r25, r1
 b20:	08 95       	ret
 b22:	81 54       	subi	r24, 0x41	; 65
 b24:	8a 51       	subi	r24, 0x1A	; 26
 b26:	08 f4       	brcc	.+2      	; 0xb2a <tolower+0xc>
 b28:	80 5e       	subi	r24, 0xE0	; 224
 b2a:	85 5a       	subi	r24, 0xA5	; 165
 b2c:	08 95       	ret

00000b2e <_exit>:
 b2e:	f8 94       	cli

00000b30 <__stop_program>:
 b30:	ff cf       	rjmp	.-2      	; 0xb30 <__stop_program>
