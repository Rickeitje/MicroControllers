
Week3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab4  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000893  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000458  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	48 d0       	rcall	.+144    	; 0x12a <main>
  9a:	4a c0       	rjmp	.+148    	; 0x130 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <lcd_command>:
#include <util/delay.h>
#include <avr/interrupt.h>

void lcd_command ( unsigned char dat )
{
	PORTC = dat & 0xF0; // hoge nibble
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
  a4:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	ef ec       	ldi	r30, 0xCF	; 207
  a8:	f7 e0       	ldi	r31, 0x07	; 7
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_command+0xc>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_command+0x12>
  b0:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
  b2:	94 e0       	ldi	r25, 0x04	; 4
  b4:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4; // lage nibble
  b6:	f0 e1       	ldi	r31, 0x10	; 16
  b8:	8f 9f       	mul	r24, r31
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
  c0:	ab 9a       	sbi	0x15, 3	; 21
  c2:	8f ec       	ldi	r24, 0xCF	; 207
  c4:	97 e0       	ldi	r25, 0x07	; 7
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_command+0x28>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_command+0x2e>
  cc:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x00; // stop
  ce:	15 ba       	out	0x15, r1	; 21
  d0:	08 95       	ret

000000d2 <init>:
}

void init(void)
{
	// return home
	lcd_command( 0x02 );
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	e4 df       	rcall	.-56     	; 0x9e <lcd_command>
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
  d6:	88 e2       	ldi	r24, 0x28	; 40
  d8:	e2 df       	rcall	.-60     	; 0x9e <lcd_command>
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	e0 df       	rcall	.-64     	; 0x9e <lcd_command>
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 );
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	de df       	rcall	.-68     	; 0x9e <lcd_command>
	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	dc cf       	rjmp	.-72     	; 0x9e <lcd_command>
  e6:	08 95       	ret

000000e8 <lcd_writeChar>:
  e8:	98 2f       	mov	r25, r24
}

void lcd_writeChar( unsigned char dat )
{
	PORTC = dat & 0xF0; // hoge nibble
  ea:	90 7f       	andi	r25, 0xF0	; 240
  ec:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x0C; // data (RS=1),
  ee:	95 b3       	in	r25, 0x15	; 21
  f0:	9c 60       	ori	r25, 0x0C	; 12
  f2:	95 bb       	out	0x15, r25	; 21
  f4:	ef ec       	ldi	r30, 0xCF	; 207
  f6:	f7 e0       	ldi	r31, 0x07	; 7
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_writeChar+0x10>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_writeChar+0x16>
  fe:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
 100:	94 e0       	ldi	r25, 0x04	; 4
 102:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4; // lage nibble
 104:	f0 e1       	ldi	r31, 0x10	; 16
 106:	8f 9f       	mul	r24, r31
 108:	c0 01       	movw	r24, r0
 10a:	11 24       	eor	r1, r1
 10c:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C; // data (RS=1),
 10e:	85 b3       	in	r24, 0x15	; 21
 110:	8c 60       	ori	r24, 0x0C	; 12
 112:	85 bb       	out	0x15, r24	; 21
 114:	8f ec       	ldi	r24, 0xCF	; 207
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_writeChar+0x30>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_writeChar+0x36>
 11e:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x00; // stop
 120:	15 ba       	out	0x15, r1	; 21
 122:	08 95       	ret

00000124 <display_text>:
	//{
		//lcd_writeChar(zin[i]);
		//_delay_ms(100);
	//}
	
	lcd_writeChar('a');
 124:	81 e6       	ldi	r24, 0x61	; 97
 126:	e0 cf       	rjmp	.-64     	; 0xe8 <lcd_writeChar>
 128:	08 95       	ret

0000012a <main>:

int main(void)
{
    /* Replace with your application code */
   
		init();
 12a:	d3 df       	rcall	.-90     	; 0xd2 <init>
		display_text();
 12c:	fb df       	rcall	.-10     	; 0x124 <display_text>
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x4>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
