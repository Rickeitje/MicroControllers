
Week3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca6  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b8  00000000  00000000  00000fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004db  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000495  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000380  00000000  00000000  000023f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002779  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	8e c0       	rjmp	.+284    	; 0x146 <__vector_10>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	85 d0       	rcall	.+266    	; 0x1b4 <main>
  aa:	9e c0       	rjmp	.+316    	; 0x1e8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_command>:
#include <avr/interrupt.h>
#include <string.h>

void lcd_command ( unsigned char dat )
{
	PORTC = dat & 0xF0; // hoge nibble
  ae:	98 2f       	mov	r25, r24
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
  b4:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	ef ec       	ldi	r30, 0xCF	; 207
  b8:	f7 e0       	ldi	r31, 0x07	; 7
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_command+0xc>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_command+0x12>
  c0:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4; // lage nibble
  c6:	f0 e1       	ldi	r31, 0x10	; 16
  c8:	8f 9f       	mul	r24, r31
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
  d0:	ab 9a       	sbi	0x15, 3	; 21
  d2:	8f ec       	ldi	r24, 0xCF	; 207
  d4:	97 e0       	ldi	r25, 0x07	; 7
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_command+0x28>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_command+0x2e>
  dc:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x00; // stop
  de:	15 ba       	out	0x15, r1	; 21
  e0:	08 95       	ret

000000e2 <clearDisplay>:
  e2:	8f ec       	ldi	r24, 0xCF	; 207
  e4:	97 e0       	ldi	r25, 0x07	; 7
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <clearDisplay+0x4>
  ea:	00 c0       	rjmp	.+0      	; 0xec <clearDisplay+0xa>
  ec:	00 00       	nop
	// (EN=0 RS=0)
}

void clearDisplay(){
	_delay_ms(1);
	lcd_command(0x01);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	de cf       	rjmp	.-68     	; 0xae <lcd_command>
  f2:	08 95       	ret

000000f4 <init>:


void init()
{
	// return home
	lcd_command( 0x02 );
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	db df       	rcall	.-74     	; 0xae <lcd_command>
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
  f8:	88 e2       	ldi	r24, 0x28	; 40
  fa:	d9 df       	rcall	.-78     	; 0xae <lcd_command>
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
  fc:	8c e0       	ldi	r24, 0x0C	; 12
  fe:	d7 df       	rcall	.-82     	; 0xae <lcd_command>
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 );
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	d5 df       	rcall	.-86     	; 0xae <lcd_command>
	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	d3 cf       	rjmp	.-90     	; 0xae <lcd_command>
 108:	08 95       	ret

0000010a <lcd_writeChar>:
 10a:	98 2f       	mov	r25, r24
}


void lcd_writeChar( unsigned char dat )
{
	PORTC = dat & 0xF0; // hoge nibble
 10c:	90 7f       	andi	r25, 0xF0	; 240
 10e:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x0C; // data (RS=1),
 110:	95 b3       	in	r25, 0x15	; 21
 112:	9c 60       	ori	r25, 0x0C	; 12
 114:	95 bb       	out	0x15, r25	; 21
 116:	ef ec       	ldi	r30, 0xCF	; 207
 118:	f7 e0       	ldi	r31, 0x07	; 7
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_writeChar+0x10>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_writeChar+0x16>
 120:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
 122:	94 e0       	ldi	r25, 0x04	; 4
 124:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4; // lage nibble
 126:	f0 e1       	ldi	r31, 0x10	; 16
 128:	8f 9f       	mul	r24, r31
 12a:	c0 01       	movw	r24, r0
 12c:	11 24       	eor	r1, r1
 12e:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C; // data (RS=1),
 130:	85 b3       	in	r24, 0x15	; 21
 132:	8c 60       	ori	r24, 0x0C	; 12
 134:	85 bb       	out	0x15, r24	; 21
 136:	8f ec       	ldi	r24, 0xCF	; 207
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_writeChar+0x30>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_writeChar+0x36>
 140:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x00; // stop
 142:	15 ba       	out	0x15, r1	; 21
 144:	08 95       	ret

00000146 <__vector_10>:

static char zin[] = "Hallo Diedrich";
int count = 0;
char buffer;

ISR(TIMER2_OVF_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	0b b6       	in	r0, 0x3b	; 59
 152:	0f 92       	push	r0
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	count++;
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 17a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	buffer = count;
 17e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <buffer>
	clearDisplay();
 182:	af df       	rcall	.-162    	; 0xe2 <clearDisplay>
	lcd_writeChar(buffer);
 184:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <buffer>
 188:	c0 df       	rcall	.-128    	; 0x10a <lcd_writeChar>
	TCNT2 = -1;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	84 bd       	out	0x24, r24	; 36
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	7f 91       	pop	r23
 19c:	6f 91       	pop	r22
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0b be       	out	0x3b, r0	; 59
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <main>:


int main(void)
{
		DDRD = 0xFF;
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	81 bb       	out	0x11, r24	; 17
		DDRC = 0xFF;
 1b8:	84 bb       	out	0x14, r24	; 20
		PORTC = 0x00;
 1ba:	15 ba       	out	0x15, r1	; 21
		
		TCNT2 = -1;
 1bc:	84 bd       	out	0x24, r24	; 36
		TIMSK |= (1 << 6);
 1be:	87 b7       	in	r24, 0x37	; 55
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	87 bf       	out	0x37, r24	; 55
		SREG |= (1 << 7);
 1c4:	8f b7       	in	r24, 0x3f	; 63
 1c6:	80 68       	ori	r24, 0x80	; 128
 1c8:	8f bf       	out	0x3f, r24	; 63
		TCCR2 = 0b0000111;  
 1ca:	87 e0       	ldi	r24, 0x07	; 7
 1cc:	85 bd       	out	0x25, r24	; 37
		sei();
 1ce:	78 94       	sei
   
		init();
 1d0:	91 df       	rcall	.-222    	; 0xf4 <init>
		clearDisplay();
 1d2:	87 df       	rcall	.-242    	; 0xe2 <clearDisplay>
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	81 ee       	ldi	r24, 0xE1	; 225
 1d8:	94 e0       	ldi	r25, 0x04	; 4
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x26>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x30>
 1e4:	00 00       	nop
 1e6:	f6 cf       	rjmp	.-20     	; 0x1d4 <main+0x20>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
