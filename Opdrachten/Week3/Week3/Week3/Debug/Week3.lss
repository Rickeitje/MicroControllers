
Week3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800110  00800110  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e11  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a89  00000000  00000000  0000126d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000537  00000000  00000000  00001cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00002230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b8  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045f  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002c4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	bd c0       	rjmp	.+378    	; 0x1a4 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ee       	ldi	r30, 0xE4	; 228
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 32       	cpi	r26, 0x26	; 38
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	be d0       	rcall	.+380    	; 0x240 <main>
  c4:	0d c1       	rjmp	.+538    	; 0x2e0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_command>:
#include <avr/interrupt.h>
#include <string.h>

void lcd_command ( unsigned char dat )
{
	PORTC = dat & 0xF0; // hoge nibble
  c8:	98 2f       	mov	r25, r24
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
  ce:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	ef ec       	ldi	r30, 0xCF	; 207
  d2:	f7 e0       	ldi	r31, 0x07	; 7
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_command+0xc>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_command+0x12>
  da:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4; // lage nibble
  e0:	f0 e1       	ldi	r31, 0x10	; 16
  e2:	8f 9f       	mul	r24, r31
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
  ea:	ab 9a       	sbi	0x15, 3	; 21
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_command+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_command+0x2e>
  f6:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x00; // stop
  f8:	15 ba       	out	0x15, r1	; 21
  fa:	08 95       	ret

000000fc <clearDisplay>:
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <clearDisplay+0x4>
 104:	00 c0       	rjmp	.+0      	; 0x106 <clearDisplay+0xa>
 106:	00 00       	nop
	// (EN=0 RS=0)
}

void clearDisplay(){
	_delay_ms(1);
	lcd_command(0x01);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	de cf       	rjmp	.-68     	; 0xc8 <lcd_command>
 10c:	08 95       	ret

0000010e <init>:


void init()
{
	// return home
	lcd_command( 0x02 );
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	db df       	rcall	.-74     	; 0xc8 <lcd_command>
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	d9 df       	rcall	.-78     	; 0xc8 <lcd_command>
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
 116:	8c e0       	ldi	r24, 0x0C	; 12
 118:	d7 df       	rcall	.-82     	; 0xc8 <lcd_command>
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 );
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	d5 df       	rcall	.-86     	; 0xc8 <lcd_command>
	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	d3 cf       	rjmp	.-90     	; 0xc8 <lcd_command>
 122:	08 95       	ret

00000124 <lcd_writeChar>:
 124:	98 2f       	mov	r25, r24
}


void lcd_writeChar( unsigned char dat )
{
	PORTC = dat & 0xF0; // hoge nibble
 126:	90 7f       	andi	r25, 0xF0	; 240
 128:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x0C; // data (RS=1),
 12a:	95 b3       	in	r25, 0x15	; 21
 12c:	9c 60       	ori	r25, 0x0C	; 12
 12e:	95 bb       	out	0x15, r25	; 21
 130:	ef ec       	ldi	r30, 0xCF	; 207
 132:	f7 e0       	ldi	r31, 0x07	; 7
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_writeChar+0x10>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_writeChar+0x16>
 13a:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
 13c:	94 e0       	ldi	r25, 0x04	; 4
 13e:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4; // lage nibble
 140:	f0 e1       	ldi	r31, 0x10	; 16
 142:	8f 9f       	mul	r24, r31
 144:	c0 01       	movw	r24, r0
 146:	11 24       	eor	r1, r1
 148:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C; // data (RS=1),
 14a:	85 b3       	in	r24, 0x15	; 21
 14c:	8c 60       	ori	r24, 0x0C	; 12
 14e:	85 bb       	out	0x15, r24	; 21
 150:	8f ec       	ldi	r24, 0xCF	; 207
 152:	97 e0       	ldi	r25, 0x07	; 7
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_writeChar+0x30>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_writeChar+0x36>
 15a:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x00; // stop
 15c:	15 ba       	out	0x15, r1	; 21
 15e:	08 95       	ret

00000160 <display_text>:
	// (EN=0 RS=0)
}

void display_text(char* string)
{
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ef ec       	ldi	r30, 0xCF	; 207
 16a:	f7 e0       	ldi	r31, 0x07	; 7
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <display_text+0xc>
 170:	00 c0       	rjmp	.+0      	; 0x172 <display_text+0x12>
 172:	00 00       	nop
	_delay_ms(1);
	int length = strlen(string);
 174:	fc 01       	movw	r30, r24
 176:	01 90       	ld	r0, Z+
 178:	00 20       	and	r0, r0
 17a:	e9 f7       	brne	.-6      	; 0x176 <display_text+0x16>
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	e8 1b       	sub	r30, r24
 180:	f9 0b       	sbc	r31, r25
	for(int x = 0; x < length; x++){
 182:	1e 16       	cp	r1, r30
 184:	1f 06       	cpc	r1, r31
 186:	4c f4       	brge	.+18     	; 0x19a <display_text+0x3a>
 188:	ec 01       	movw	r28, r24
 18a:	8c 01       	movw	r16, r24
 18c:	0e 0f       	add	r16, r30
 18e:	1f 1f       	adc	r17, r31
		lcd_writeChar(string[x]);
 190:	89 91       	ld	r24, Y+
 192:	c8 df       	rcall	.-112    	; 0x124 <lcd_writeChar>

void display_text(char* string)
{
	_delay_ms(1);
	int length = strlen(string);
	for(int x = 0; x < length; x++){
 194:	c0 17       	cp	r28, r16
 196:	d1 07       	cpc	r29, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <display_text+0x30>
		lcd_writeChar(string[x]);
	}
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <__vector_10>:

static char zin[] = "Hallo Diedrich";
int count = 0;
char buffer[20];

ISR(TIMER2_OVF_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	0b b6       	in	r0, 0x3b	; 59
 1b0:	0f 92       	push	r0
 1b2:	1f 93       	push	r17
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
 1d0:	ca e2       	ldi	r28, 0x2A	; 42
 1d2:	d3 e2       	ldi	r29, 0x23	; 35
			//lcd_writeChar(count/10+'0');
			//lcd_writeChar(count%10+'0');
		//}else{
			//lcd_writeChar(count+'0');
	//}
	TCNT2 = -1;
 1d4:	1f ef       	ldi	r17, 0xFF	; 255
int count = 0;
char buffer[20];

ISR(TIMER2_OVF_vect){
	for(int i = 0; i < 9002; i++){
		count++;
 1d6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1da:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 1e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	clearDisplay();
 1e8:	89 df       	rcall	.-238    	; 0xfc <clearDisplay>
	display_text(' ');
 1ea:	80 e2       	ldi	r24, 0x20	; 32
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	b8 df       	rcall	.-144    	; 0x160 <display_text>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1f0:	4a e0       	ldi	r20, 0x0A	; 10
 1f2:	62 e1       	ldi	r22, 0x12	; 18
 1f4:	71 e0       	ldi	r23, 0x01	; 1
 1f6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1fa:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
	display_text(itoa(count, buffer, 10));
 1fe:	3d d0       	rcall	.+122    	; 0x27a <__itoa_ncheck>
 200:	af df       	rcall	.-162    	; 0x160 <display_text>
			//lcd_writeChar(count/10+'0');
			//lcd_writeChar(count%10+'0');
		//}else{
			//lcd_writeChar(count+'0');
	//}
	TCNT2 = -1;
 202:	14 bd       	out	0x24, r17	; 36
 204:	8f e0       	ldi	r24, 0x0F	; 15
 206:	97 e2       	ldi	r25, 0x27	; 39
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <__vector_10+0x64>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <__vector_10+0x6a>
 20e:	00 00       	nop
 210:	21 97       	sbiw	r28, 0x01	; 1
static char zin[] = "Hallo Diedrich";
int count = 0;
char buffer[20];

ISR(TIMER2_OVF_vect){
	for(int i = 0; i < 9002; i++){
 212:	09 f7       	brne	.-62     	; 0x1d6 <__vector_10+0x32>
			//lcd_writeChar(count+'0');
	//}
	TCNT2 = -1;
	_delay_ms(5);
	}
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	1f 91       	pop	r17
 232:	0f 90       	pop	r0
 234:	0b be       	out	0x3b, r0	; 59
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <main>:



int main(void)
{
	DDRD = 0xFF;
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 244:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 246:	15 ba       	out	0x15, r1	; 21
	
	TCNT2 = -1;
 248:	84 bd       	out	0x24, r24	; 36
	TIMSK |= (1 << 6);
 24a:	87 b7       	in	r24, 0x37	; 55
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	87 bf       	out	0x37, r24	; 55
	SREG |= (1 << 7);
 250:	8f b7       	in	r24, 0x3f	; 63
 252:	80 68       	ori	r24, 0x80	; 128
 254:	8f bf       	out	0x3f, r24	; 63
	TCCR2 = 0b0000111;
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	85 bd       	out	0x25, r24	; 37
	sei();
 25a:	78 94       	sei
	
	init();
 25c:	58 df       	rcall	.-336    	; 0x10e <init>
	clearDisplay();
 25e:	4e df       	rcall	.-356    	; 0xfc <clearDisplay>
 260:	80 e0       	ldi	r24, 0x00	; 0
	display_text(zin);
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	7d df       	rcall	.-262    	; 0x160 <display_text>
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	81 ee       	ldi	r24, 0xE1	; 225
 26a:	94 e0       	ldi	r25, 0x04	; 4
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x2c>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x36>
 276:	00 00       	nop
 278:	f6 cf       	rjmp	.-20     	; 0x266 <main+0x26>

0000027a <__itoa_ncheck>:
 27a:	bb 27       	eor	r27, r27
 27c:	4a 30       	cpi	r20, 0x0A	; 10
 27e:	31 f4       	brne	.+12     	; 0x28c <__itoa_ncheck+0x12>
 280:	99 23       	and	r25, r25
 282:	22 f4       	brpl	.+8      	; 0x28c <__itoa_ncheck+0x12>
 284:	bd e2       	ldi	r27, 0x2D	; 45
 286:	90 95       	com	r25
 288:	81 95       	neg	r24
 28a:	9f 4f       	sbci	r25, 0xFF	; 255
 28c:	01 c0       	rjmp	.+2      	; 0x290 <__utoa_common>

0000028e <__utoa_ncheck>:
 28e:	bb 27       	eor	r27, r27

00000290 <__utoa_common>:
 290:	fb 01       	movw	r30, r22
 292:	55 27       	eor	r21, r21
 294:	aa 27       	eor	r26, r26
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	aa 1f       	adc	r26, r26
 29c:	a4 17       	cp	r26, r20
 29e:	10 f0       	brcs	.+4      	; 0x2a4 <__utoa_common+0x14>
 2a0:	a4 1b       	sub	r26, r20
 2a2:	83 95       	inc	r24
 2a4:	50 51       	subi	r21, 0x10	; 16
 2a6:	b9 f7       	brne	.-18     	; 0x296 <__utoa_common+0x6>
 2a8:	a0 5d       	subi	r26, 0xD0	; 208
 2aa:	aa 33       	cpi	r26, 0x3A	; 58
 2ac:	08 f0       	brcs	.+2      	; 0x2b0 <__utoa_common+0x20>
 2ae:	a9 5d       	subi	r26, 0xD9	; 217
 2b0:	a1 93       	st	Z+, r26
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	79 f7       	brne	.-34     	; 0x294 <__utoa_common+0x4>
 2b6:	b1 11       	cpse	r27, r1
 2b8:	b1 93       	st	Z+, r27
 2ba:	11 92       	st	Z+, r1
 2bc:	cb 01       	movw	r24, r22
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <strrev>

000002c0 <strrev>:
 2c0:	dc 01       	movw	r26, r24
 2c2:	fc 01       	movw	r30, r24
 2c4:	67 2f       	mov	r22, r23
 2c6:	71 91       	ld	r23, Z+
 2c8:	77 23       	and	r23, r23
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <strrev+0x4>
 2cc:	32 97       	sbiw	r30, 0x02	; 2
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <strrev+0x18>
 2d0:	7c 91       	ld	r23, X
 2d2:	6d 93       	st	X+, r22
 2d4:	70 83       	st	Z, r23
 2d6:	62 91       	ld	r22, -Z
 2d8:	ae 17       	cp	r26, r30
 2da:	bf 07       	cpc	r27, r31
 2dc:	c8 f3       	brcs	.-14     	; 0x2d0 <strrev+0x10>
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
