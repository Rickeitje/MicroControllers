
OpdrachtB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000830  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000797  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000247  00000000  00000000  00001253  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f5  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a4  00000000  00000000  000018fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000019a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	44 c0       	rjmp	.+136    	; 0xae <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	36 d0       	rcall	.+108    	; 0x116 <main>
  aa:	6a c0       	rjmp	.+212    	; 0x180 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_9>:
#include <avr/interrupt.h>


int counter = 0;

ISR(TIMER2_COMP_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	5f 93       	push	r21
  be:	6f 93       	push	r22
  c0:	7f 93       	push	r23
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
	counter++;
	counter = counter % 40;
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	68 e2       	ldi	r22, 0x28	; 40
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	2c d0       	rcall	.+88     	; 0x132 <__divmodhi4>
  da:	28 2f       	mov	r18, r24
  dc:	39 2f       	mov	r19, r25
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
	
	if(counter == 0) {
  e6:	21 15       	cp	r18, r1
  e8:	31 05       	cpc	r19, r1
  ea:	19 f4       	brne	.+6      	; 0xf2 <__vector_9+0x44>
		PORTD = 0b10000000;
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	82 bb       	out	0x12, r24	; 18
  f0:	04 c0       	rjmp	.+8      	; 0xfa <__vector_9+0x4c>
		} else if(counter == 15) {
  f2:	2f 30       	cpi	r18, 0x0F	; 15
  f4:	31 05       	cpc	r19, r1
  f6:	09 f4       	brne	.+2      	; 0xfa <__vector_9+0x4c>
		PORTD = 0b00000000;
  f8:	12 ba       	out	0x12, r1	; 18
	}	
}
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <main>:


int main(void)
{
	TCNT2 = 0;
 116:	14 bc       	out	0x24, r1	; 36
	OCR2 = 125;
 118:	8d e7       	ldi	r24, 0x7D	; 125
 11a:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << 7);
 11c:	87 b7       	in	r24, 0x37	; 55
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0b00001011;
 122:	8b e0       	ldi	r24, 0x0B	; 11
 124:	85 bd       	out	0x25, r24	; 37
	
	DDRC = 0xFF;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 12a:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
 12c:	87 bb       	out	0x17, r24	; 23
	
	sei();	
 12e:	78 94       	sei
 130:	ff cf       	rjmp	.-2      	; 0x130 <main+0x1a>

00000132 <__divmodhi4>:
 132:	97 fb       	bst	r25, 7
 134:	07 2e       	mov	r0, r23
 136:	16 f4       	brtc	.+4      	; 0x13c <__divmodhi4+0xa>
 138:	00 94       	com	r0
 13a:	06 d0       	rcall	.+12     	; 0x148 <__divmodhi4_neg1>
 13c:	77 fd       	sbrc	r23, 7
 13e:	08 d0       	rcall	.+16     	; 0x150 <__divmodhi4_neg2>
 140:	0b d0       	rcall	.+22     	; 0x158 <__udivmodhi4>
 142:	07 fc       	sbrc	r0, 7
 144:	05 d0       	rcall	.+10     	; 0x150 <__divmodhi4_neg2>
 146:	3e f4       	brtc	.+14     	; 0x156 <__divmodhi4_exit>

00000148 <__divmodhi4_neg1>:
 148:	90 95       	com	r25
 14a:	81 95       	neg	r24
 14c:	9f 4f       	sbci	r25, 0xFF	; 255
 14e:	08 95       	ret

00000150 <__divmodhi4_neg2>:
 150:	70 95       	com	r23
 152:	61 95       	neg	r22
 154:	7f 4f       	sbci	r23, 0xFF	; 255

00000156 <__divmodhi4_exit>:
 156:	08 95       	ret

00000158 <__udivmodhi4>:
 158:	aa 1b       	sub	r26, r26
 15a:	bb 1b       	sub	r27, r27
 15c:	51 e1       	ldi	r21, 0x11	; 17
 15e:	07 c0       	rjmp	.+14     	; 0x16e <__udivmodhi4_ep>

00000160 <__udivmodhi4_loop>:
 160:	aa 1f       	adc	r26, r26
 162:	bb 1f       	adc	r27, r27
 164:	a6 17       	cp	r26, r22
 166:	b7 07       	cpc	r27, r23
 168:	10 f0       	brcs	.+4      	; 0x16e <__udivmodhi4_ep>
 16a:	a6 1b       	sub	r26, r22
 16c:	b7 0b       	sbc	r27, r23

0000016e <__udivmodhi4_ep>:
 16e:	88 1f       	adc	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	5a 95       	dec	r21
 174:	a9 f7       	brne	.-22     	; 0x160 <__udivmodhi4_loop>
 176:	80 95       	com	r24
 178:	90 95       	com	r25
 17a:	bc 01       	movw	r22, r24
 17c:	cd 01       	movw	r24, r26
 17e:	08 95       	ret

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
