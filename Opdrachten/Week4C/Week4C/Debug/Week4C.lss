
Week4C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d1f  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ba  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000460  00000000  00000000  00001979  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c9  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ba  00000000  00000000  000023a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000255f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	b1 d0       	rcall	.+354    	; 0x1fc <main>
  9a:	e4 c0       	rjmp	.+456    	; 0x264 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
void displayOff()
{
	spi_slaveSelect(0); // Select display chip
	spi_write(0x0C); // Register 0B: Shutdown register
	spi_write(0x00); // -> 1 = Normal operation
	spi_slaveDeSelect(0); // Deselect display chip
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <spi_masterInit>:
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	bb 98       	cbi	0x17, 3	; 23
  c6:	c0 9a       	sbi	0x18, 0	; 24
  c8:	82 e5       	ldi	r24, 0x52	; 82
  ca:	8d b9       	out	0x0d, r24	; 13
  cc:	08 95       	ret

000000ce <spi_write>:
  ce:	8f b9       	out	0x0f, r24	; 15
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <spi_write+0x2>
  d4:	08 95       	ret

000000d6 <spi_slaveSelect>:
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <spi_slaveSelect+0xc>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <spi_slaveSelect+0x8>
  e6:	20 95       	com	r18
  e8:	29 23       	and	r18, r25
  ea:	28 bb       	out	0x18, r18	; 24
  ec:	08 95       	ret

000000ee <spi_slaveDeSelect>:
  ee:	98 b3       	in	r25, 0x18	; 24
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <spi_slaveDeSelect+0xc>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <spi_slaveDeSelect+0x8>
  fe:	29 2b       	or	r18, r25
 100:	28 bb       	out	0x18, r18	; 24
 102:	08 95       	ret

00000104 <displayDriverInit>:
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	e7 df       	rcall	.-50     	; 0xd6 <spi_slaveSelect>
 108:	89 e0       	ldi	r24, 0x09	; 9
 10a:	e1 df       	rcall	.-62     	; 0xce <spi_write>
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	df df       	rcall	.-66     	; 0xce <spi_write>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	ed df       	rcall	.-38     	; 0xee <spi_slaveDeSelect>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	df df       	rcall	.-66     	; 0xd6 <spi_slaveSelect>
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	d9 df       	rcall	.-78     	; 0xce <spi_write>
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	d7 df       	rcall	.-82     	; 0xce <spi_write>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	e5 df       	rcall	.-54     	; 0xee <spi_slaveDeSelect>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	d7 df       	rcall	.-82     	; 0xd6 <spi_slaveSelect>
 128:	8b e0       	ldi	r24, 0x0B	; 11
 12a:	d1 df       	rcall	.-94     	; 0xce <spi_write>
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	cf df       	rcall	.-98     	; 0xce <spi_write>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	dd df       	rcall	.-70     	; 0xee <spi_slaveDeSelect>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	cf df       	rcall	.-98     	; 0xd6 <spi_slaveSelect>
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	c9 df       	rcall	.-110    	; 0xce <spi_write>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	c7 df       	rcall	.-114    	; 0xce <spi_write>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	d5 cf       	rjmp	.-86     	; 0xee <spi_slaveDeSelect>
 144:	08 95       	ret

00000146 <displayNumber>:
}

void displayNumber(unsigned char adress, unsigned char value){
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	d8 2f       	mov	r29, r24
 14c:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0); // Select display chip
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	c2 df       	rcall	.-124    	; 0xd6 <spi_slaveSelect>
	spi_write(adress); // digit adress: (digit place)
 152:	8d 2f       	mov	r24, r29
 154:	bc df       	rcall	.-136    	; 0xce <spi_write>
	spi_write(value); // digit value: i (= digit place)
 156:	8c 2f       	mov	r24, r28
 158:	ba df       	rcall	.-140    	; 0xce <spi_write>
	spi_slaveDeSelect(0); // Deselect display chip
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	c8 df       	rcall	.-112    	; 0xee <spi_slaveDeSelect>
 15e:	df 91       	pop	r29
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <display4DigNumber>:
 164:	ef 92       	push	r14

void display4DigNumber(int value){
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
	if(value>=0){
 172:	99 23       	and	r25, r25
 174:	ec f0       	brlt	.+58     	; 0x1b0 <display4DigNumber+0x4c>
		displayNumber(4,value/1000);
 176:	68 ee       	ldi	r22, 0xE8	; 232
 178:	73 e0       	ldi	r23, 0x03	; 3
 17a:	4d d0       	rcall	.+154    	; 0x216 <__divmodhi4>
 17c:	7c 01       	movw	r14, r24
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	e2 df       	rcall	.-60     	; 0x146 <displayNumber>
		displayNumber(3,(value%1000)/100);
 182:	04 e6       	ldi	r16, 0x64	; 100
 184:	10 e0       	ldi	r17, 0x00	; 0
 186:	c7 01       	movw	r24, r14
 188:	b8 01       	movw	r22, r16
 18a:	45 d0       	rcall	.+138    	; 0x216 <__divmodhi4>
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	db df       	rcall	.-74     	; 0x146 <displayNumber>
		displayNumber(2,(value%100)/10);
 190:	ce 01       	movw	r24, r28
 192:	b8 01       	movw	r22, r16
 194:	40 d0       	rcall	.+128    	; 0x216 <__divmodhi4>
 196:	0a e0       	ldi	r16, 0x0A	; 10
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	b8 01       	movw	r22, r16
 19c:	3c d0       	rcall	.+120    	; 0x216 <__divmodhi4>
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	d2 df       	rcall	.-92     	; 0x146 <displayNumber>
		displayNumber(1,(value%10));
 1a2:	ce 01       	movw	r24, r28
 1a4:	b8 01       	movw	r22, r16
 1a6:	37 d0       	rcall	.+110    	; 0x216 <__divmodhi4>
 1a8:	68 2f       	mov	r22, r24
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	cc df       	rcall	.-104    	; 0x146 <displayNumber>
 1ae:	1f c0       	rjmp	.+62     	; 0x1ee <display4DigNumber+0x8a>
 1b0:	6a e0       	ldi	r22, 0x0A	; 10
	}
	else{
		displayNumber(4,10);
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	c8 df       	rcall	.-112    	; 0x146 <displayNumber>
 1b6:	d1 95       	neg	r29
		value = value * -1;
 1b8:	c1 95       	neg	r28
 1ba:	d1 09       	sbc	r29, r1
		displayNumber(3,(value%1000)/100);
 1bc:	ce 01       	movw	r24, r28
 1be:	68 ee       	ldi	r22, 0xE8	; 232
 1c0:	73 e0       	ldi	r23, 0x03	; 3
 1c2:	29 d0       	rcall	.+82     	; 0x216 <__divmodhi4>
 1c4:	04 e6       	ldi	r16, 0x64	; 100
 1c6:	10 e0       	ldi	r17, 0x00	; 0
 1c8:	b8 01       	movw	r22, r16
 1ca:	25 d0       	rcall	.+74     	; 0x216 <__divmodhi4>
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	bb df       	rcall	.-138    	; 0x146 <displayNumber>
		displayNumber(2,(value%100)/10);
 1d0:	ce 01       	movw	r24, r28
 1d2:	b8 01       	movw	r22, r16
 1d4:	20 d0       	rcall	.+64     	; 0x216 <__divmodhi4>
 1d6:	0a e0       	ldi	r16, 0x0A	; 10
 1d8:	10 e0       	ldi	r17, 0x00	; 0
 1da:	b8 01       	movw	r22, r16
 1dc:	1c d0       	rcall	.+56     	; 0x216 <__divmodhi4>
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	b2 df       	rcall	.-156    	; 0x146 <displayNumber>
 1e2:	ce 01       	movw	r24, r28
 1e4:	b8 01       	movw	r22, r16
		displayNumber(1,(value%10));
 1e6:	17 d0       	rcall	.+46     	; 0x216 <__divmodhi4>
 1e8:	68 2f       	mov	r22, r24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	ac df       	rcall	.-168    	; 0x146 <displayNumber>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
	}
}
 1f6:	ff 90       	pop	r15
 1f8:	ef 90       	pop	r14
 1fa:	08 95       	ret

000001fc <main>:
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	87 bb       	out	0x17, r24	; 23
 200:	5f df       	rcall	.-322    	; 0xc0 <spi_masterInit>
 202:	80 df       	rcall	.-256    	; 0x104 <displayDriverInit>

int main()
{
	DDRB=0x01; // Set PB0 pin as output for display select
	spi_masterInit(); // Initialize spi module
	displayDriverInit(); // Initialize display chip
 204:	85 e8       	ldi	r24, 0x85	; 133
	// write 4-digit data
	display4DigNumber(-123);
 206:	9f ef       	ldi	r25, 0xFF	; 255
 208:	ad df       	rcall	.-166    	; 0x164 <display4DigNumber>
 20a:	88 ee       	ldi	r24, 0xE8	; 232
	wait(1000);
 20c:	93 e0       	ldi	r25, 0x03	; 3
 20e:	47 df       	rcall	.-370    	; 0x9e <wait>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
 214:	08 95       	ret

00000216 <__divmodhi4>:
 216:	97 fb       	bst	r25, 7
 218:	07 2e       	mov	r0, r23
 21a:	16 f4       	brtc	.+4      	; 0x220 <__divmodhi4+0xa>
 21c:	00 94       	com	r0
 21e:	06 d0       	rcall	.+12     	; 0x22c <__divmodhi4_neg1>
 220:	77 fd       	sbrc	r23, 7
 222:	08 d0       	rcall	.+16     	; 0x234 <__divmodhi4_neg2>
 224:	0b d0       	rcall	.+22     	; 0x23c <__udivmodhi4>
 226:	07 fc       	sbrc	r0, 7
 228:	05 d0       	rcall	.+10     	; 0x234 <__divmodhi4_neg2>
 22a:	3e f4       	brtc	.+14     	; 0x23a <__divmodhi4_exit>

0000022c <__divmodhi4_neg1>:
 22c:	90 95       	com	r25
 22e:	81 95       	neg	r24
 230:	9f 4f       	sbci	r25, 0xFF	; 255
 232:	08 95       	ret

00000234 <__divmodhi4_neg2>:
 234:	70 95       	com	r23
 236:	61 95       	neg	r22
 238:	7f 4f       	sbci	r23, 0xFF	; 255

0000023a <__divmodhi4_exit>:
 23a:	08 95       	ret

0000023c <__udivmodhi4>:
 23c:	aa 1b       	sub	r26, r26
 23e:	bb 1b       	sub	r27, r27
 240:	51 e1       	ldi	r21, 0x11	; 17
 242:	07 c0       	rjmp	.+14     	; 0x252 <__udivmodhi4_ep>

00000244 <__udivmodhi4_loop>:
 244:	aa 1f       	adc	r26, r26
 246:	bb 1f       	adc	r27, r27
 248:	a6 17       	cp	r26, r22
 24a:	b7 07       	cpc	r27, r23
 24c:	10 f0       	brcs	.+4      	; 0x252 <__udivmodhi4_ep>
 24e:	a6 1b       	sub	r26, r22
 250:	b7 0b       	sbc	r27, r23

00000252 <__udivmodhi4_ep>:
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	5a 95       	dec	r21
 258:	a9 f7       	brne	.-22     	; 0x244 <__udivmodhi4_loop>
 25a:	80 95       	com	r24
 25c:	90 95       	com	r25
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
