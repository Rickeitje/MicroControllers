
Week4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008af  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e7  00000000  00000000  00000c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002db  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000016dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000413  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000111  00000000  00000000  00001b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2c c0       	rjmp	.+88     	; 0xae <__vector_21>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3b d0       	rcall	.+118    	; 0x120 <main>
  aa:	d4 c0       	rjmp	.+424    	; 0x254 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_21>:
typedef unsigned int u_int16;

u_int16 measured = 0;

ISR(ADC_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	u_int32 result = ADC;
  d4:	24 b1       	in	r18, 0x04	; 4
  d6:	35 b1       	in	r19, 0x05	; 5
	result *= 5000;
  d8:	a8 e8       	ldi	r26, 0x88	; 136
  da:	b3 e1       	ldi	r27, 0x13	; 19
  dc:	ac d0       	rcall	.+344    	; 0x236 <__umulhisi3>
	result /= 1023;
	measured = result;
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	33 e0       	ldi	r19, 0x03	; 3
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	85 d0       	rcall	.+266    	; 0x1f2 <__udivmodsi4>
  e8:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
  ec:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
}
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	bf 91       	pop	r27
  f6:	af 91       	pop	r26
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	7f 91       	pop	r23
  fe:	6f 91       	pop	r22
 100:	5f 91       	pop	r21
 102:	4f 91       	pop	r20
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0b be       	out	0x3b, r0	; 59
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <adcInit>:

void adcInit( void )
{
	ADMUX = 0x01;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0xEE;
 11a:	8e ee       	ldi	r24, 0xEE	; 238
 11c:	86 b9       	out	0x06, r24	; 6
 11e:	08 95       	ret

00000120 <main>:
}

int main(void)
{
	DDRA = 0xFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 124:	87 bb       	out	0x17, r24	; 23
	DDRF = 0x00;
 126:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	adcInit();
 12a:	f5 df       	rcall	.-22     	; 0x116 <adcInit>
	
	sei();
 12c:	78 94       	sei
	
	while (1)
	{
		u_int32 lamps = measured / 625 ;
 12e:	21 e7       	ldi	r18, 0x71	; 113
 130:	32 e0       	ldi	r19, 0x02	; 2
		else if(lamps <= 6)
		PORTA = PORTB = 0b111111100;
		else if(lamps <= 7)
		PORTA = PORTB = 0b111111110;
		else
		PORTA = PORTB = 0b111111111;
 132:	ff 24       	eor	r15, r15
 134:	fa 94       	dec	r15
		else if(lamps <= 5)
		PORTA = PORTB = 0b111111000;
		else if(lamps <= 6)
		PORTA = PORTB = 0b111111100;
		else if(lamps <= 7)
		PORTA = PORTB = 0b111111110;
 136:	0e ef       	ldi	r16, 0xFE	; 254
		else if(lamps <= 4)
		PORTA = PORTB = 0b11110000;
		else if(lamps <= 5)
		PORTA = PORTB = 0b111111000;
		else if(lamps <= 6)
		PORTA = PORTB = 0b111111100;
 138:	1c ef       	ldi	r17, 0xFC	; 252
		else if(lamps <= 3)
		PORTA = PORTB = 0b11100000;
		else if(lamps <= 4)
		PORTA = PORTB = 0b11110000;
		else if(lamps <= 5)
		PORTA = PORTB = 0b111111000;
 13a:	d8 ef       	ldi	r29, 0xF8	; 248
		else if(lamps <= 2)
		PORTA = PORTB = 0b11000000;
		else if(lamps <= 3)
		PORTA = PORTB = 0b11100000;
		else if(lamps <= 4)
		PORTA = PORTB = 0b11110000;
 13c:	c0 ef       	ldi	r28, 0xF0	; 240
		if(lamps<=1)
		PORTA = PORTB = 0b10000000;
		else if(lamps <= 2)
		PORTA = PORTB = 0b11000000;
		else if(lamps <= 3)
		PORTA = PORTB = 0b11100000;
 13e:	f0 ee       	ldi	r31, 0xE0	; 224
		u_int32 lamps = measured / 625 ;
		
		if(lamps<=1)
		PORTA = PORTB = 0b10000000;
		else if(lamps <= 2)
		PORTA = PORTB = 0b11000000;
 140:	40 ec       	ldi	r20, 0xC0	; 192
	while (1)
	{
		u_int32 lamps = measured / 625 ;
		
		if(lamps<=1)
		PORTA = PORTB = 0b10000000;
 142:	e0 e8       	ldi	r30, 0x80	; 128
	
	sei();
	
	while (1)
	{
		u_int32 lamps = measured / 625 ;
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 148:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 14c:	b9 01       	movw	r22, r18
 14e:	3d d0       	rcall	.+122    	; 0x1ca <__udivmodhi4>
 150:	cb 01       	movw	r24, r22
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	b0 e0       	ldi	r27, 0x00	; 0
		
		if(lamps<=1)
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	91 05       	cpc	r25, r1
 15a:	a1 05       	cpc	r26, r1
 15c:	b1 05       	cpc	r27, r1
 15e:	18 f4       	brcc	.+6      	; 0x166 <main+0x46>
		PORTA = PORTB = 0b10000000;
 160:	e8 bb       	out	0x18, r30	; 24
 162:	eb bb       	out	0x1b, r30	; 27
 164:	ef cf       	rjmp	.-34     	; 0x144 <main+0x24>
		else if(lamps <= 2)
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	91 05       	cpc	r25, r1
 16a:	a1 05       	cpc	r26, r1
 16c:	b1 05       	cpc	r27, r1
 16e:	18 f4       	brcc	.+6      	; 0x176 <main+0x56>
		PORTA = PORTB = 0b11000000;
 170:	48 bb       	out	0x18, r20	; 24
 172:	4b bb       	out	0x1b, r20	; 27
 174:	e7 cf       	rjmp	.-50     	; 0x144 <main+0x24>
		else if(lamps <= 3)
 176:	84 30       	cpi	r24, 0x04	; 4
 178:	91 05       	cpc	r25, r1
 17a:	a1 05       	cpc	r26, r1
 17c:	b1 05       	cpc	r27, r1
 17e:	18 f4       	brcc	.+6      	; 0x186 <main+0x66>
		PORTA = PORTB = 0b11100000;
 180:	f8 bb       	out	0x18, r31	; 24
 182:	fb bb       	out	0x1b, r31	; 27
 184:	df cf       	rjmp	.-66     	; 0x144 <main+0x24>
		else if(lamps <= 4)
 186:	85 30       	cpi	r24, 0x05	; 5
 188:	91 05       	cpc	r25, r1
 18a:	a1 05       	cpc	r26, r1
 18c:	b1 05       	cpc	r27, r1
 18e:	18 f4       	brcc	.+6      	; 0x196 <main+0x76>
		PORTA = PORTB = 0b11110000;
 190:	c8 bb       	out	0x18, r28	; 24
 192:	cb bb       	out	0x1b, r28	; 27
 194:	d7 cf       	rjmp	.-82     	; 0x144 <main+0x24>
		else if(lamps <= 5)
 196:	86 30       	cpi	r24, 0x06	; 6
 198:	91 05       	cpc	r25, r1
 19a:	a1 05       	cpc	r26, r1
 19c:	b1 05       	cpc	r27, r1
 19e:	18 f4       	brcc	.+6      	; 0x1a6 <main+0x86>
		PORTA = PORTB = 0b111111000;
 1a0:	d8 bb       	out	0x18, r29	; 24
 1a2:	db bb       	out	0x1b, r29	; 27
 1a4:	cf cf       	rjmp	.-98     	; 0x144 <main+0x24>
		else if(lamps <= 6)
 1a6:	87 30       	cpi	r24, 0x07	; 7
 1a8:	91 05       	cpc	r25, r1
 1aa:	a1 05       	cpc	r26, r1
 1ac:	b1 05       	cpc	r27, r1
 1ae:	18 f4       	brcc	.+6      	; 0x1b6 <main+0x96>
		PORTA = PORTB = 0b111111100;
 1b0:	18 bb       	out	0x18, r17	; 24
 1b2:	1b bb       	out	0x1b, r17	; 27
 1b4:	c7 cf       	rjmp	.-114    	; 0x144 <main+0x24>
		else if(lamps <= 7)
 1b6:	08 97       	sbiw	r24, 0x08	; 8
 1b8:	a1 05       	cpc	r26, r1
 1ba:	b1 05       	cpc	r27, r1
 1bc:	18 f4       	brcc	.+6      	; 0x1c4 <main+0xa4>
		PORTA = PORTB = 0b111111110;
 1be:	08 bb       	out	0x18, r16	; 24
 1c0:	0b bb       	out	0x1b, r16	; 27
 1c2:	c0 cf       	rjmp	.-128    	; 0x144 <main+0x24>
		else
		PORTA = PORTB = 0b111111111;
 1c4:	f8 ba       	out	0x18, r15	; 24
 1c6:	fb ba       	out	0x1b, r15	; 27
 1c8:	bd cf       	rjmp	.-134    	; 0x144 <main+0x24>

000001ca <__udivmodhi4>:
 1ca:	aa 1b       	sub	r26, r26
 1cc:	bb 1b       	sub	r27, r27
 1ce:	51 e1       	ldi	r21, 0x11	; 17
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <__udivmodhi4_ep>

000001d2 <__udivmodhi4_loop>:
 1d2:	aa 1f       	adc	r26, r26
 1d4:	bb 1f       	adc	r27, r27
 1d6:	a6 17       	cp	r26, r22
 1d8:	b7 07       	cpc	r27, r23
 1da:	10 f0       	brcs	.+4      	; 0x1e0 <__udivmodhi4_ep>
 1dc:	a6 1b       	sub	r26, r22
 1de:	b7 0b       	sbc	r27, r23

000001e0 <__udivmodhi4_ep>:
 1e0:	88 1f       	adc	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	5a 95       	dec	r21
 1e6:	a9 f7       	brne	.-22     	; 0x1d2 <__udivmodhi4_loop>
 1e8:	80 95       	com	r24
 1ea:	90 95       	com	r25
 1ec:	bc 01       	movw	r22, r24
 1ee:	cd 01       	movw	r24, r26
 1f0:	08 95       	ret

000001f2 <__udivmodsi4>:
 1f2:	a1 e2       	ldi	r26, 0x21	; 33
 1f4:	1a 2e       	mov	r1, r26
 1f6:	aa 1b       	sub	r26, r26
 1f8:	bb 1b       	sub	r27, r27
 1fa:	fd 01       	movw	r30, r26
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <__udivmodsi4_ep>

000001fe <__udivmodsi4_loop>:
 1fe:	aa 1f       	adc	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	ee 1f       	adc	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	a2 17       	cp	r26, r18
 208:	b3 07       	cpc	r27, r19
 20a:	e4 07       	cpc	r30, r20
 20c:	f5 07       	cpc	r31, r21
 20e:	20 f0       	brcs	.+8      	; 0x218 <__udivmodsi4_ep>
 210:	a2 1b       	sub	r26, r18
 212:	b3 0b       	sbc	r27, r19
 214:	e4 0b       	sbc	r30, r20
 216:	f5 0b       	sbc	r31, r21

00000218 <__udivmodsi4_ep>:
 218:	66 1f       	adc	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	88 1f       	adc	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	1a 94       	dec	r1
 222:	69 f7       	brne	.-38     	; 0x1fe <__udivmodsi4_loop>
 224:	60 95       	com	r22
 226:	70 95       	com	r23
 228:	80 95       	com	r24
 22a:	90 95       	com	r25
 22c:	9b 01       	movw	r18, r22
 22e:	ac 01       	movw	r20, r24
 230:	bd 01       	movw	r22, r26
 232:	cf 01       	movw	r24, r30
 234:	08 95       	ret

00000236 <__umulhisi3>:
 236:	a2 9f       	mul	r26, r18
 238:	b0 01       	movw	r22, r0
 23a:	b3 9f       	mul	r27, r19
 23c:	c0 01       	movw	r24, r0
 23e:	a3 9f       	mul	r26, r19
 240:	70 0d       	add	r23, r0
 242:	81 1d       	adc	r24, r1
 244:	11 24       	eor	r1, r1
 246:	91 1d       	adc	r25, r1
 248:	b2 9f       	mul	r27, r18
 24a:	70 0d       	add	r23, r0
 24c:	81 1d       	adc	r24, r1
 24e:	11 24       	eor	r1, r1
 250:	91 1d       	adc	r25, r1
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
